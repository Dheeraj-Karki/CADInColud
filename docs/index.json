[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/engine/controller/Controller.js",
    "content": "import * as THREE from 'three';\nimport assert from 'assert';\n\n/**\n * Represent Vectorizer\n * @interface Controller\n * @extends {THREE.EventDispatcher}\n */\nexport default class Controller extends THREE.EventDispatcher {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n    }\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/engine/controller/Controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Controller",
    "memberof": "lib/engine/controller/Controller.js",
    "static": true,
    "longname": "lib/engine/controller/Controller.js~Controller",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/engine/controller/Controller.js",
    "importStyle": "Controller",
    "description": "Represent Vectorizer",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "THREE.EventDispatcher"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/engine/controller/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/Controller.js~Controller#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "lib/engine/controller/OrbitController.js",
    "content": "import * as THREE from 'three';\nimport Controller from './Controller';\n\n/**\n * This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n * the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n * supported.\n * \n * Orbit - left mouse / touch: one finger move\n * Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n * Pan - right mouse, or arrow keys / touch: three finter swipe\n * \n * @public\n * @extends {Controller}\n * @class\n * @example\n * controls = new THREE.OrbitController( camera );\n * controls.target.z = 150;\n */\nexport default class OrbitController extends Controller {\n    /**\n     * @constructor\n     * @param {Object} object - Object which need to control using event\n     * @param {Object} domElement - parent which hold the object \n     * @param {Object} config - configure the controller\n     */\n    constructor(object, domElement, config = {}) {\n        super();\n        /**\n         * Object which need to control using event\n         * @public\n         * @type {Object} \n         */\n        this.object = object;\n        /**\n         * parent which hold the object\n         * @public\n         * @type {Object} \n         */\n        this.domElement = (domElement !== undefined) ? domElement : document;\n        /**\n         * Configure controller\n         * @public\n         * @type {Object} \n         */\n        this.config = {\n            /**\n             * Set to false to disable this control\n             * @public\n             * @type {Boolean} \n             */\n            enabled: true,\n            /**\n             * This option actually enables dollying in and out; left as \"zoom\" for\n             * backwards compatibility\n             * @public\n             * @type {Boolean} \n             */\n            noZoom: false,\n            /**\n             * Zoom Speed\n             * @public\n             * @type {Number} \n             */\n            zoomSpeed: 1.0,\n            /**\n             * Limits to how far you can dolly in\n             * @public\n             * @type {Number} \n             */\n            minDistance: 0,\n            /**\n             * Limits to how far you can dolly out\n             * @public\n             * @type {Number} \n             */\n            maxDistance: Infinity,\n            /**\n             * Set to true to disable this control\n             * @public\n             * @type {Boolean} \n             */\n            noRotate: false,\n            /**\n             * Rotation speed\n             * @public\n             * @type {Number} \n             */\n            rotateSpeed: 1.0,\n            /**\n             * Set to true to disable this control\n             * @public\n             * @type {Boolean} \n             */\n            noPan: false,\n            /**\n             * Pixels moved per arrow key push\n             * @public\n             * @type {Number} \n             */\n            keyPanSpeed: 7.0,\n            /**\n             * Set to true to automatically rotate around the target\n             * @public\n             * @type {Boolean} \n             */\n            autoRotate: false,\n            /**\n             * 30 seconds per round when fps is 60\n             * @public\n             * @type {Number} \n             */\n            autoRotateSpeed: 2.0,\n            /**\n             * How far you can orbit vertically, upper and lower limits.\n             * Range is 0 to Math.PI radians.\n             * @public\n             * @type {Number} in radians\n             */\n            minPolarAngle: 0,\n            /**\n             * How far you can orbit vertically, upper and lower limits.\n             * Range is 0 to Math.PI radians.\n             * @public\n             * @type {Number} in radians\n             */\n            maxPolarAngle: Math.PI,\n            /**\n             * Set to true to disable use of the keys\n             * @public\n             * @type {Number} in radians\n             */\n            noKeys: false,\n            /**\n             * The four arrow keys\n             * @public\n             * @type {Object} in radians\n             */\n            keys: {\n                LEFT: 37,\n                UP: 38,\n                RIGHT: 39,\n                BOTTOM: 40\n            }\n        }\n        //Copy User input config\n        Object.keys(config).forEach((key) => {\n            if (this.config.hasOwnProperty(key))\n                this.config[key] = config[key];\n            else\n                console.warn(\"No such configuration : \" + key);\n        });\n\n        /**\n         * \"target\" sets the location of focus, where the control orbits around\n         * and where it pans with respect to.\n         * @public\n         * @type {THREE.Vector3} \n         */\n        this.target = new THREE.Vector3();\n\n        /**\n         * Controller Object instance\n         * @private\n         * @type {this}\n         */\n        this._this = this;\n        /**\n         * Event per second\n         * @private\n         * @type {Number}\n         */\n        this._EPS = 0.000001;\n        /**\n         * Rotation starting vector\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._rotateStart = new THREE.Vector2();\n        /**\n         * Rotation ending vector\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._rotateEnd = new THREE.Vector2();\n        /**\n         * Delta to add on each rotation\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._rotateDelta = new THREE.Vector2();\n        /**\n         * Panning starting vector\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._panStart = new THREE.Vector2();\n        /**\n         * Panning ending vector\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._panEnd = new THREE.Vector2();\n        /**\n         * Delta adding on each panning\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._panDelta = new THREE.Vector2();\n        /**\n         * Pan offset\n         * @private\n         * @type {THREE.Vector3}\n         */\n        this._panOffset = new THREE.Vector3();\n        /**\n         * @private\n         * @type {THREE.Vector3}\n         */\n        this._offset = new THREE.Vector3();\n        /**\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._dollyStart = new THREE.Vector2();\n        /**\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._dollyEnd = new THREE.Vector2();\n        /**\n         * @private\n         * @type {THREE.Vector2}\n         */\n        this._dollyDelta = new THREE.Vector2();\n        /**\n         * @private\n         * @type {Number}\n         */\n        this._phiDelta = 0;\n        /**\n         * @private\n         * @type {Number}\n         */\n        this._thetaDelta = 0;\n        /**\n         * @private\n         * @type {Number}\n         */\n        this._scale = 1;\n        /**\n         * @private\n         * @type {THREE.Vector3}\n         */\n        this._pan = new THREE.Vector3();\n        /**\n         * @private\n         * @type {THREE.Vector3}\n         */\n        this._lastPosition = new THREE.Vector3();\n        /**\n         * @private\n         * @type {Number}\n         */\n        this._state = STATE.NONE;\n\n        // events\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._changeEvent = {\n            type: 'change'\n        };\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._startEvent = {\n            type: 'start'\n        };\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._endEvent = {\n            type: 'end'\n        };\n\n        this.domElement.addEventListener('contextmenu', function (event) {\n            event.preventDefault();\n        }, false);\n        this.domElement.addEventListener('mousedown', this.__onMouseDown.bind(this), false);\n        this.domElement.addEventListener('mousewheel', this.__onMouseWheel.bind(this), false);\n        this.domElement.addEventListener('DOMMouseScroll', this.__onMouseWheel.bind(this), false); // firefox\n\n        this.domElement.addEventListener('touchstart', this.__touchstart.bind(this), false);\n        this.domElement.addEventListener('touchend', this.__touchend.bind(this), false);\n        this.domElement.addEventListener('touchmove', this.__touchmove.bind(this), false);\n\n        window.addEventListener('keydown', this.__onKeyDown.bind(this), false);\n    }\n\n    /**\n     * @public\n     * @param {Number} angle - angle of rotation in radian\n     */\n    rotateLeft(angle) {\n        if (angle === undefined) {\n            angle = this.__getAutoRotationAngle();\n        }\n        this._thetaDelta -= angle;\n    };\n\n    /**\n     * @public\n     * @param {Number} angle - angle of rotation in radian\n     */\n    rotateUp(angle) {\n        if (angle === undefined) {\n            angle = this.__getAutoRotationAngle();\n        }\n        this._phiDelta -= angle;\n    };\n\n    /**\n     * Pass in distance in world space to move left\n     * @public\n     * @param {Number} distance - distance in world space to move left\n     */\n    panLeft(distance) {\n        let te = this.object.matrix.elements;\n        // get X column of matrix\n        this._panOffset.set(te[0], te[1], te[2]);\n        this._panOffset.multiplyScalar(-distance);\n        this._pan.add(this._panOffset);\n\n    };\n\n    /**\n     * Pass in distance in world space to move up\n     * @public\n     * @param {Number} distance - distance in world space to move up\n     */\n    panUp(distance) {\n        let te = this.object.matrix.elements;\n        // get Y column of matrix\n        this._panOffset.set(te[4], te[5], te[6]);\n        this._panOffset.multiplyScalar(distance);\n        this._pan.add(this._panOffset);\n    };\n\n    /**\n     * Pass in x,y of change desired in pixel space,\n     * right and down are positive\n     * @public\n     * @param {Number} deltaX - distance in world space to move up\n     * @param {Number} deltaY - distance in world space to move up\n     */\n    pan(deltaX, deltaY) {\n        let element = this.domElement === document ? this.domElement.body : this.domElement;\n        if (this.object.fov !== undefined) {\n            // perspective\n            let position = this.object.position;\n            let offset = position.clone().sub(this.target);\n            let targetDistance = offset.length();\n            // half of the fov is center to top of screen\n            targetDistance *= Math.tan((this.object.fov / 2) * Math.PI / 180.0);\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            this.panLeft(2 * deltaX * targetDistance / element.clientHeight);\n            this.panUp(2 * deltaY * targetDistance / element.clientHeight);\n        } else if (this.object.top !== undefined) {\n            // orthographic\n            this.panLeft(deltaX * (this.object.right - this.object.left) / element.clientWidth);\n            this.panUp(deltaY * (this.object.top - this.object.bottom) / element.clientHeight);\n        } else {\n            // camera neither orthographic or perspective\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n        }\n    };\n\n    /**\n     * @public\n     * @param {Number} dollyScale - zoom scale\n     */\n    dollyIn(dollyScale) {\n        if (dollyScale === undefined) {\n            dollyScale = this.__getZoomScale();\n        }\n        this._scale /= dollyScale;\n    };\n\n    /**\n     * @public\n     * @param {Number} dollyScale - zoom scale\n     */\n    dollyOut(dollyScale) {\n        if (dollyScale === undefined) {\n            dollyScale = this.__getZoomScale();\n        }\n        this._scale *= dollyScale;\n    };\n\n    /**\n     * @public\n     */\n    update() {\n\n        if (this.object.top !== undefined) {\n            this.object.top = (this._scale * this.object.top);\n            this.object.bottom = (this._scale * this.object.bottom);\n            this.object.left = (this._scale * this.object.left);\n            this.object.right = (this._scale * this.object.right);\n            this.object.updateProjectionMatrix();\n        }\n        let position = this.object.position;\n        this._offset.copy(position).sub(this.target);\n        this.target.add(this._pan);\n\n        //ToDo: May be Unused code\n        position.copy(this.target).add(this._offset);\n\n        this.object.lookAt(this.target);\n        this.dispatchEvent(this._changeEvent);\n        this._scale = 1;\n        this._pan.set(0, 0, 0);\n    };\n\n    /**\n     * @public\n     */\n    reset() {\n        this._state = STATE.NONE;\n        this.target.copy(this.target0);\n        this.object.position.copy(this.position0);\n        this.update();\n    };\n\n    /**\n     * @public\n     */\n    resetPan() {\n        this._scale = 1;\n    };\n\n    /**\n     * @private\n     * @return {Number}\n     */\n    __getAutoRotationAngle() {\n        return 2 * Math.PI / 60 / 60 * this.autoRotateSpeed;\n    }\n    /**\n     * @private\n     * @return {Number}\n     */\n    __getZoomScale() {\n        return Math.pow(0.95, this.config.zoomSpeed);\n    }\n\n    /**\n     * @private\n     */\n    __onMouseDown(event) {\n\n        if (this.config.enabled === false)\n            return;\n\n        event.preventDefault();\n\n        if (event.button === 0) {\n            if (this.config.noRotate === true)\n                return;\n\n            this._state = STATE.ROTATE;\n            this._rotateStart.set(event.clientX, event.clientY);\n\n        } else if (event.button === 1) {\n            if (this.config.noZoom === true)\n                return;\n\n            this._state = STATE.DOLLY;\n            this._dollyStart.set(event.clientX, event.clientY);\n\n        } else if (event.button === 2) {\n            if (this.config.noPan === true)\n                return;\n\n            this._state = STATE.PAN;\n            this._panStart.set(event.clientX, event.clientY);\n\n        }\n\n        this.domElement.addEventListener('mousemove', this.__onMouseMove.bind(this), false);\n        this.domElement.addEventListener('mouseup', this.__onMouseUp.bind(this), false);\n        this.dispatchEvent(this._startEvent);\n\n    }\n\n    /**\n     * @private\n     */\n    __onMouseMove(event) {\n\n        if (this.config.enabled === false)\n            return;\n\n        event.preventDefault();\n\n        var element = this.domElement === document ? this.domElement.body : this.domElement;\n\n        if (this._state === STATE.ROTATE) {\n\n            if (this.config.noRotate === true) return;\n\n            this._rotateEnd.set(event.clientX, event.clientY);\n            this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart);\n\n            // rotating across whole screen goes 360 degrees around\n            this.rotateLeft(2 * Math.PI * this._rotateDelta.x / element.clientWidth * this.config.rotateSpeed);\n\n            // rotating up and down along whole screen attempts to go 360, but limited to 180\n            this.rotateUp(2 * Math.PI * this._rotateDelta.y / element.clientHeight * this.config.rotateSpeed);\n\n            this._rotateStart.copy(this._rotateEnd);\n\n        } else if (this._state === STATE.DOLLY) {\n\n            if (this.config.noZoom === true)\n                return;\n\n            this._dollyEnd.set(event.clientX, event.clientY);\n            this._dollyDelta.subVectors(dollyEnd, dollyStart);\n\n            if (this._dollyDelta.y > 0) {\n                this.dollyIn();\n            } else {\n                this.dollyOut();\n            }\n\n            this._dollyStart.copy(this._dollyEnd);\n\n        } else if (this._state === STATE.PAN) {\n\n            if (this.config.noPan === true) return;\n\n            this._panEnd.set(event.clientX, event.clientY);\n            this._panDelta.subVectors(this._panEnd, this._panStart);\n\n            this.pan(this._panDelta.x, this._panDelta.y);\n\n            this._panStart.copy(this._panEnd);\n\n        }\n\n        this.update();\n\n    }\n    /**\n     * @private\n     */\n    __onMouseUp(event) {\n\n        if (this.config.enabled === false)\n            return;\n\n        this.domElement.removeEventListener('mousemove', this.__onMouseMove.bind(this), false);\n        this.domElement.removeEventListener('mouseup', this.__onMouseUp.bind(this), false);\n        this.dispatchEvent(this._endEvent);\n        this._state = STATE.NONE;\n\n    }\n    /**\n     * @private\n     */\n    __onMouseWheel(event) {\n\n        if (this.config.enabled === false || this.config.noZoom === true)\n            return;\n\n        event.preventDefault();\n\n        var delta = 0;\n\n        if (event.wheelDelta !== undefined) { // WebKit / Opera / Explorer 9\n\n            delta = event.wheelDelta;\n\n        } else if (event.detail !== undefined) { // Firefox\n\n            delta = -event.detail;\n\n        }\n\n        if (delta > 0) {\n\n            this.dollyOut();\n\n        } else {\n\n            this.dollyIn();\n\n        }\n\n        this.update();\n        this.dispatchEvent(this._startEvent);\n        this.dispatchEvent(this._endEvent);\n\n    }\n    /**\n     * @private\n     */\n    __onKeyDown(event) {\n\n        if (this.config.enabled === false || this.config.noKeys === true || this.config.noPan === true)\n            return;\n\n        switch (event.keyCode) {\n\n            case this.config.keys.UP:\n                this.pan(0, this.config.keyPanSpeed);\n                this.update();\n                break;\n\n            case this.config.keys.BOTTOM:\n                this.pan(0, -this.config.keyPanSpeed);\n                this.update();\n                break;\n\n            case this.config.keys.LEFT:\n                this.pan(this.config.keyPanSpeed, 0);\n                this.update();\n                break;\n\n            case this.config.keys.RIGHT:\n                this.pan(-this.config.keyPanSpeed, 0);\n                this.update();\n                break;\n\n        }\n\n    }\n    /**\n     * @private\n     */\n    __touchstart(event) {\n\n        if (this.config.enabled === false) return;\n\n        switch (event.touches.length) {\n\n            case 1: // one-fingered touch: rotate\n\n                if (this.config.noRotate === true) return;\n\n                this._state = STATE.TOUCH_ROTATE;\n\n                this._rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n                break;\n\n            case 2: // two-fingered touch: dolly\n\n                if (this.config.noZoom === true) return;\n\n                this._state = STATE.TOUCH_DOLLY;\n\n                let dx = event.touches[0].pageX - event.touches[1].pageX;\n                let dy = event.touches[0].pageY - event.touches[1].pageY;\n                let distance = Math.sqrt(dx * dx + dy * dy);\n                this._dollyStart.set(0, distance);\n                break;\n\n            case 3: // three-fingered touch: pan\n\n                if (this.config.noPan === true) return;\n\n                this._state = STATE.TOUCH_PAN;\n\n                this._panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n                break;\n\n            default:\n\n                this._state = STATE.NONE;\n\n        }\n\n        this.dispatchEvent(startEvent);\n\n    }\n    /**\n     * @private\n     */\n    __touchmove(event) {\n\n        if (this.config.enabled === false) return;\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        var element = this.domElement === document ? this.domElement.body : this.domElement;\n\n        switch (event.touches.length) {\n\n            case 1: // one-fingered touch: rotate\n\n                if (this.config.noRotate === true) return;\n                if (this._state !== STATE.TOUCH_ROTATE) return;\n\n                this._rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n                this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart);\n\n                // rotating across whole screen goes 360 degrees around\n                this.rotateLeft(2 * Math.PI * this._rotateDelta.x / element.clientWidth * this.config.rotateSpeed);\n                // rotating up and down along whole screen attempts to go 360, but limited to 180\n                this.rotateUp(2 * Math.PI * this._rotateDelta.y / element.clientHeight * this.config.rotateSpeed);\n\n                this._rotateStart.copy(this._rotateEnd);\n\n                this.update();\n                break;\n\n            case 2: // two-fingered touch: dolly\n\n                if (this.config.noZoom === true) return;\n                if (this._state !== STATE.TOUCH_DOLLY) return;\n\n                let dx = event.touches[0].pageX - event.touches[1].pageX;\n                let dy = event.touches[0].pageY - event.touches[1].pageY;\n                let distance = Math.sqrt(dx * dx + dy * dy);\n\n                this._dollyEnd.set(0, distance);\n                this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);\n\n                if (this._dollyDelta.y > 0) {\n\n                    this.dollyOut();\n\n                } else {\n\n                    this.dollyIn();\n\n                }\n\n                this._dollyStart.copy(dollyEnd);\n\n                this.update();\n                break;\n\n            case 3: // three-fingered touch: pan\n\n                if (this.config.noPan === true) return;\n                if (this._state !== STATE.TOUCH_PAN) return;\n\n                this._panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n                this._panDelta.subVectors(this._panEnd, this._panStart);\n\n                this.pan(this._panDelta.x, this._panDelta.y);\n\n                this._panStart.copy(this._panEnd);\n\n                this.update();\n                break;\n\n            default:\n\n                this._state = STATE.NONE;\n\n        }\n\n    }\n    /**\n     * @private\n     */\n    __touchend( /* event */) {\n\n        if (this.config.enabled === false) return;\n\n        this.dispatchEvent(this._endEvent);\n        this._state = STATE.NONE;\n\n    }\n}\n\nlet STATE = {\n    NONE: -1,\n    ROTATE: 0,\n    DOLLY: 1,\n    PAN: 2,\n    TOUCH_ROTATE: 3,\n    TOUCH_DOLLY: 4,\n    TOUCH_PAN: 5\n};",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/engine/controller/OrbitController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "OrbitController",
    "memberof": "lib/engine/controller/OrbitController.js",
    "static": true,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/engine/controller/OrbitController.js",
    "importStyle": "OrbitController",
    "description": "This set of controls performs orbiting, dollying (zooming), and panning. It maintains\nthe \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\nsupported.\n\nOrbit - left mouse / touch: one finger move\nZoom - middle mouse, or mousewheel / touch: two finger spread or squish\nPan - right mouse, or arrow keys / touch: three finter swipe",
    "examples": [
      "controls = new THREE.OrbitController( camera );\ncontrols.target.z = 150;"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "Controller"
    ]
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Object which need to control using event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "domElement",
        "description": "parent which hold the object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "configure the controller"
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "object",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#object",
    "access": "public",
    "description": "Object which need to control using event",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "domElement",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#domElement",
    "access": "public",
    "description": "parent which hold the object",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "config",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#config",
    "access": "public",
    "description": "Configure controller",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "target",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#target",
    "access": "public",
    "description": "\"target\" sets the location of focus, where the control orbits around\nand where it pans with respect to.",
    "lineNumber": 160,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_this",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_this",
    "access": "private",
    "description": "Controller Object instance",
    "lineNumber": 167,
    "type": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_EPS",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_EPS",
    "access": "private",
    "description": "Event per second",
    "lineNumber": 173,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_rotateStart",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_rotateStart",
    "access": "private",
    "description": "Rotation starting vector",
    "lineNumber": 179,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_rotateEnd",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_rotateEnd",
    "access": "private",
    "description": "Rotation ending vector",
    "lineNumber": 185,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_rotateDelta",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_rotateDelta",
    "access": "private",
    "description": "Delta to add on each rotation",
    "lineNumber": 191,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_panStart",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_panStart",
    "access": "private",
    "description": "Panning starting vector",
    "lineNumber": 197,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_panEnd",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_panEnd",
    "access": "private",
    "description": "Panning ending vector",
    "lineNumber": 203,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_panDelta",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_panDelta",
    "access": "private",
    "description": "Delta adding on each panning",
    "lineNumber": 209,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_panOffset",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_panOffset",
    "access": "private",
    "description": "Pan offset",
    "lineNumber": 215,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_offset",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_offset",
    "access": "private",
    "description": "",
    "lineNumber": 220,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_dollyStart",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_dollyStart",
    "access": "private",
    "description": "",
    "lineNumber": 225,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_dollyEnd",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_dollyEnd",
    "access": "private",
    "description": "",
    "lineNumber": 230,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "_dollyDelta",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_dollyDelta",
    "access": "private",
    "description": "",
    "lineNumber": 235,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "_phiDelta",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_phiDelta",
    "access": "private",
    "description": "",
    "lineNumber": 240,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_thetaDelta",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_thetaDelta",
    "access": "private",
    "description": "",
    "lineNumber": 245,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_scale",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_scale",
    "access": "private",
    "description": "",
    "lineNumber": 250,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_pan",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_pan",
    "access": "private",
    "description": "",
    "lineNumber": 255,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_lastPosition",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_lastPosition",
    "access": "private",
    "description": "",
    "lineNumber": 260,
    "type": {
      "nullable": null,
      "types": [
        "THREE.Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "_state",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_state",
    "access": "private",
    "description": "",
    "lineNumber": 265,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_changeEvent",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_changeEvent",
    "access": "private",
    "description": "",
    "lineNumber": 272,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "_startEvent",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_startEvent",
    "access": "private",
    "description": "",
    "lineNumber": 279,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "_endEvent",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#_endEvent",
    "access": "private",
    "description": "",
    "lineNumber": 286,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "rotateLeft",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#rotateLeft",
    "access": "public",
    "description": "",
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "angle of rotation in radian"
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "rotateUp",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#rotateUp",
    "access": "public",
    "description": "",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "angle of rotation in radian"
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "panLeft",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#panLeft",
    "access": "public",
    "description": "Pass in distance in world space to move left",
    "lineNumber": 331,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "distance in world space to move left"
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "panUp",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#panUp",
    "access": "public",
    "description": "Pass in distance in world space to move up",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "distance in world space to move up"
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "pan",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#pan",
    "access": "public",
    "description": "Pass in x,y of change desired in pixel space,\nright and down are positive",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaX",
        "description": "distance in world space to move up"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "deltaY",
        "description": "distance in world space to move up"
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "dollyIn",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#dollyIn",
    "access": "public",
    "description": "",
    "lineNumber": 386,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dollyScale",
        "description": "zoom scale"
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "dollyOut",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#dollyOut",
    "access": "public",
    "description": "",
    "lineNumber": 397,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dollyScale",
        "description": "zoom scale"
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "update",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#update",
    "access": "public",
    "description": "",
    "lineNumber": 407,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "reset",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#reset",
    "access": "public",
    "description": "",
    "lineNumber": 432,
    "params": [],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "resetPan",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#resetPan",
    "access": "public",
    "description": "",
    "lineNumber": 442,
    "params": [],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "__getAutoRotationAngle",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__getAutoRotationAngle",
    "access": "private",
    "description": "",
    "lineNumber": 450,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "__getZoomScale",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__getZoomScale",
    "access": "private",
    "description": "",
    "lineNumber": 457,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "__onMouseDown",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__onMouseDown",
    "access": "private",
    "description": "",
    "lineNumber": 464,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "__onMouseMove",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__onMouseMove",
    "access": "private",
    "description": "",
    "lineNumber": 503,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "__onMouseUp",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__onMouseUp",
    "access": "private",
    "description": "",
    "lineNumber": 562,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "__onMouseWheel",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__onMouseWheel",
    "access": "private",
    "description": "",
    "lineNumber": 576,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "__onKeyDown",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__onKeyDown",
    "access": "private",
    "description": "",
    "lineNumber": 613,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "__touchstart",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__touchstart",
    "access": "private",
    "description": "",
    "lineNumber": 646,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "__touchmove",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__touchmove",
    "access": "private",
    "description": "",
    "lineNumber": 694,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "__touchend",
    "memberof": "lib/engine/controller/OrbitController.js~OrbitController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/controller/OrbitController.js~OrbitController#__touchend",
    "access": "private",
    "description": "",
    "lineNumber": 775,
    "params": [],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "STATE",
    "memberof": "lib/engine/controller/OrbitController.js",
    "static": true,
    "longname": "lib/engine/controller/OrbitController.js~STATE",
    "access": "public",
    "export": false,
    "importPath": "cadincloud/lib/engine/controller/OrbitController.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 785,
    "undocument": true,
    "type": {
      "types": [
        "{\"NONE\": *, \"ROTATE\": *, \"DOLLY\": number, \"PAN\": number, \"TOUCH_ROTATE\": number, \"TOUCH_DOLLY\": number, \"TOUCH_PAN\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "lib/engine/vectorizer/DXFVectorizer.js",
    "content": "import * as THREE from 'three';\nimport Vectorizer from './Vectorizer';\n\n/**\n * Returns the angle in radians of the vector (p1,p2). In other words, imagine\n * putting the base of the vector at coordinates (0,0) and finding the angle\n * from vector (1,0) to (p1,p2).\n * @param  {Object} p1 start point of the vector\n * @param  {Object} p2 end point of the vector\n * @return {Number} the angle\n */\nTHREE.Math.angle2 = function (p1, p2) {\n    let v1 = new THREE.Vector2(p1.x, p1.y);\n    let v2 = new THREE.Vector2(p2.x, p2.y);\n    v2.sub(v1); // sets v2 to be our chord\n    v2.normalize();\n    if (v2.y < 0) return -Math.acos(v2.x);\n    return Math.acos(v2.x);\n};\n\nTHREE.Math.polar = function (point, distance, angle) {\n    let result = {};\n    result.x = point.x + distance * Math.cos(angle);\n    result.y = point.y + distance * Math.sin(angle);\n    return result;\n};\n\n/**\n * Calculates points for a curve between two points\n * @param startPoint - the starting point of the curve\n * @param endPoint - the ending point of the curve\n * @param bulge - a value indicating how much to curve\n * @param segments - number of segments between the two given points\n */\nTHREE.BulgeGeometry = function (startPoint, endPoint, bulge, segments) {\n\n    let vertex, i, center, p0, p1, angle, radius, startAngle, thetaAngle;\n\n    THREE.Geometry.call(this);\n\n    this.startPoint = p0 = startPoint ? new THREE.Vector2(startPoint.x, startPoint.y) : new THREE.Vector2(0, 0);\n    this.endPoint = p1 = endPoint ? new THREE.Vector2(endPoint.x, endPoint.y) : new THREE.Vector2(1, 0);\n    this.bulge = bulge = bulge || 1;\n\n    angle = 4 * Math.atan(bulge);\n    radius = p0.distanceTo(p1) / 2 / Math.sin(angle / 2);\n    center = THREE.Math.polar(startPoint, radius, THREE.Math.angle2(p0, p1) + (Math.PI / 2 - angle / 2));\n\n    this.segments = segments = segments || Math.max(Math.abs(Math.ceil(angle / (Math.PI / 18))), 6); // By default want a segment roughly every 10 degrees\n    startAngle = THREE.Math.angle2(center, p0);\n    thetaAngle = angle / segments;\n\n    this.vertices.push(new THREE.Vector3(p0.x, p0.y, 0));\n\n    for (i = 1; i <= segments - 1; i++) {\n\n        vertex = THREE.Math.polar(center, Math.abs(radius), startAngle + thetaAngle * i);\n\n        this.vertices.push(new THREE.Vector3(vertex.x, vertex.y, 0));\n    }\n};\n\nTHREE.BulgeGeometry.prototype = Object.create(THREE.Geometry.prototype);\n\n/**\n * @public\n * @extends {Vectorizer}\n * @example \n * let dxfVectorizer = new DXFVectorizer()\n */\nexport default class DXFVectorizer extends Vectorizer {\n    /**\n     * Creates an instance of DXFVectorizer.\n     * @constructor\n     * @memberof DXFVectorizer\n     */\n    constructor() {\n        super();\n        this.font;\n    }\n\n    /**\n     * Vectorize to draw\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    drawEntity(entity, dxfDb) {\n        let mesh;\n        if (entity.type === 'CIRCLE' || entity.type === 'ARC') {\n            mesh = this.__drawArc(entity, dxfDb);\n        } else if (entity.type === 'LWPOLYLINE' || entity.type === 'LINE' || entity.type === 'POLYLINE') {\n            mesh = this.__drawLine(entity, dxfDb);\n        } else if (entity.type === 'TEXT') {\n            mesh = this.__drawText(entity, dxfDb);\n        } else if (entity.type === 'SOLID') {\n            mesh = this.__drawSolid(entity, dxfDb);\n        } else if (entity.type === 'POINT') {\n            mesh = this.__drawPoint(entity, dxfDb);\n        } else if (entity.type === 'INSERT') {\n            mesh = this.__drawBlock(entity, dxfDb);\n        } else if (entity.type === 'SPLINE') {\n            mesh = this.__drawSpline(entity, dxfDb);\n        } else if (entity.type === 'MTEXT') {\n            mesh = this.__drawMtext(entity, dxfDb);\n        } else if (entity.type === 'ELLIPSE') {\n            mesh = this.__drawEllipse(entity, dxfDb);\n        } else {\n            console.log(\"Unsupported Entity Type: \" + entity.type);\n        }\n        return mesh;\n    }\n    /**\n     * Vectorize Ellipse\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawEllipse(entity, dxfDb) {\n        let color = this.__getColor(entity, dxfDb);\n\n        let xrad = Math.sqrt(Math.pow(entity.majorAxisEndPoint.x, 2) + Math.pow(entity.majorAxisEndPoint.y, 2));\n        let yrad = xrad * entity.axisRatio;\n        let rotation = Math.atan2(entity.majorAxisEndPoint.y, entity.majorAxisEndPoint.x);\n\n        let curve = new THREE.EllipseCurve(entity.center.x, entity.center.y, xrad, yrad, entity.startAngle, entity.endAngle, false, // Always counterclockwise\n            rotation);\n\n        let points = curve.getPoints(50);\n        let geometry = new THREE.BufferGeometry().setFromPoints(points);\n        let material = new THREE.LineBasicMaterial({\n            linewidth: 1,\n            color: color\n        });\n\n        // Create the final object to add to the scene\n        return new THREE.Line(geometry, material);\n    }\n    /**\n     * Vectorize Line\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawLine(entity, dxfDb) {\n        let geometry = new THREE.Geometry(),\n            color = this.__getColor(entity, dxfDb),\n            material,\n            lineType;\n\n        // create geometry\n        for (let i = 0; i < entity.vertices.length; i++) {\n\n            if (entity.vertices[i].bulge) {\n                let bulge = entity.vertices[i].bulge;\n                let startPoint = entity.vertices[i];\n                let endPoint = i + 1 < entity.vertices.length ? entity.vertices[i + 1] : geometry.vertices[0];\n\n                let bulgeGeometry = new THREE.BulgeGeometry(startPoint, endPoint, bulge);\n\n                geometry.vertices.push.apply(geometry.vertices, bulgeGeometry.vertices);\n            } else {\n                let vertex = entity.vertices[i];\n                geometry.vertices.push(new THREE.Vector3(vertex.x, vertex.y, 0));\n            }\n        }\n        if (entity.shape) geometry.vertices.push(geometry.vertices[0]);\n\n        // set material\n        if (entity.lineType) {\n            lineType = dxfDb.tables.LTYPE.LTYPE[entity.lineType];\n        }\n\n        if (lineType && lineType.pattern && lineType.pattern.length !== 0) {\n            material = new THREE.LineDashedMaterial({\n                color: color,\n                gapSize: 4,\n                dashSize: 4\n            });\n        } else {\n            material = new THREE.LineBasicMaterial({\n                linewidth: 1,\n                color: color\n            });\n        }\n\n        // if(lineType && lineType.pattern && lineType.pattern.length !== 0) {\n\n        //           geometry.computeLineDistances();\n\n        //           // Ugly hack to add diffuse to this. Maybe copy the uniforms object so we\n        //           // don't add diffuse to a material.\n        //           lineType.material.uniforms.diffuse = { type: 'c', value: new THREE.Color(color) };\n\n        // \tmaterial = new THREE.ShaderMaterial({\n        // \t\tuniforms: lineType.material.uniforms,\n        // \t\tvertexShader: lineType.material.vertexShader,\n        // \t\tfragmentShader: lineType.material.fragmentShader\n        // \t});\n        // }else {\n        // \tmaterial = new THREE.LineBasicMaterial({ linewidth: 1, color: color });\n        // }\n        return new THREE.Line(geometry, material);\n    }\n\n\n    /**\n     * Vectorize Mtext\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawMtext(entity, dxfDb) {\n\n        if (!this.font) return console.warn('MText is not supported without a Three.js font loaded with THREE.FontLoader! Load a font of your choice and pass this into the constructor. See the sample for this repository or Three.js examples at http://threejs.org/examples/?q=text#webgl_geometry_text for more details.');\n\n        let color = this.__getColor(entity, dxfDb);\n\n        let geometry = new THREE.TextGeometry(entity.text, {\n            font: this.font,\n            size: entity.height * (4 / 5),\n            height: 1\n        });\n        let material = new THREE.MeshBasicMaterial({\n            color: color\n        });\n        let text = new THREE.Mesh(geometry, material);\n\n        // Measure what we rendered.\n        let measure = new THREE.Box3();\n        measure.setFromObject(text);\n\n        let textWidth = measure.max.x - measure.min.x;\n\n        // If the text ends up being wider than the box, it's supposed\n        // to be multiline. Doing that in threeJS is overkill.\n        if (entity.width != 0 && textWidth > entity.width) {\n            console.log(\"Can't render this multipline MTEXT entity, sorry.\", entity);\n            return undefined;\n        }\n\n        text.position.z = 0;\n        switch (entity.attachmentPoint) {\n            case 1:\n                // Top Left\n                text.position.x = entity.position.x;\n                text.position.y = entity.position.y - entity.height;\n                break;\n            case 2:\n                // Top Center\n                text.position.x = entity.position.x - textWidth / 2;\n                text.position.y = entity.position.y - entity.height;\n                break;\n            case 3:\n                // Top Right\n                text.position.x = entity.position.x - textWidth;\n                text.position.y = entity.position.y - entity.height;\n                break;\n\n            case 4:\n                // Middle Left\n                text.position.x = entity.position.x;\n                text.position.y = entity.position.y - entity.height / 2;\n                break;\n            case 5:\n                // Middle Center\n                text.position.x = entity.position.x - textWidth / 2;\n                text.position.y = entity.position.y - entity.height / 2;\n                break;\n            case 6:\n                // Middle Right\n                text.position.x = entity.position.x - textWidth;\n                text.position.y = entity.position.y - entity.height / 2;\n                break;\n\n            case 7:\n                // Bottom Left\n                text.position.x = entity.position.x;\n                text.position.y = entity.position.y;\n                break;\n            case 8:\n                // Bottom Center\n                text.position.x = entity.position.x - textWidth / 2;\n                text.position.y = entity.position.y;\n                break;\n            case 9:\n                // Bottom Right\n                text.position.x = entity.position.x - textWidth;\n                text.position.y = entity.position.y;\n                break;\n\n            default:\n                return undefined;\n        };\n        return text;\n    }\n\n    /**\n     * Vectorize Spline\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawSpline(entity, dxfDb) {\n        let color = this.__getColor(entity, dxfDb);\n\n        let points = entity.controlPoints.map(function (vec) {\n            return new THREE.Vector2(vec.x, vec.y);\n        });\n\n        let interpolatedPoints = [];\n        let curve = null;\n        if (entity.degreeOfSplineCurve === 2 || entity.degreeOfSplineCurve === 3) {\n            for (let i = 0; i + 2 < points.length; i = i + 2) {\n                if (entity.degreeOfSplineCurve === 2) {\n                    curve = new THREE.QuadraticBezierCurve(points[i], points[i + 1], points[i + 2]);\n                } else {\n                    curve = new THREE.QuadraticBezierCurve3(points[i], points[i + 1], points[i + 2]);\n                }\n                interpolatedPoints.push.apply(interpolatedPoints, curve.getPoints(50));\n            }\n        } else {\n            curve = new THREE.SplineCurve(points);\n            interpolatedPoints = curve.getPoints(100);\n        }\n\n        let geometry = new THREE.BufferGeometry().setFromPoints(interpolatedPoints);\n        let material = new THREE.LineBasicMaterial({\n            linewidth: 1,\n            color: color\n        });\n        let splineObject = new THREE.Line(geometry, material);\n\n        return splineObject;\n    }\n\n    /**\n     * Vectorize Arc/Circle\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawArc(entity, dxfDb) {\n        let startAngle = 0,\n            endAngle = 0;\n        if (entity.type === 'CIRCLE') {\n            startAngle = entity.startAngle || 0;\n            endAngle = startAngle + 2 * Math.PI;\n        } else {\n            startAngle = entity.startAngle;\n            endAngle = entity.endAngle;\n        }\n\n        let curve = new THREE.ArcCurve(0, 0, entity.radius, startAngle, endAngle);\n\n        let points = curve.getPoints(32);\n        let geometry = new THREE.BufferGeometry().setFromPoints(points);\n\n        let material = new THREE.LineBasicMaterial({\n            color: this.__getColor(entity, dxfDb)\n        });\n\n        let arc = new THREE.Line(geometry, material);\n        arc.position.x = entity.center.x;\n        arc.position.y = entity.center.y;\n        arc.position.z = entity.center.z;\n\n        return arc;\n    }\n\n    /**\n     * Vectorize Solid\n     * @private\n     * @param {Object} entity - entity object\n     * @param {Object} dxfDb - dxf Database object\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawSolid(entity, dxfDb) {\n        let material,\n            verts,\n            geometry = new THREE.Geometry();\n\n        verts = geometry.vertices;\n        verts.push(new THREE.Vector3(entity.points[0].x, entity.points[0].y, entity.points[0].z));\n        verts.push(new THREE.Vector3(entity.points[1].x, entity.points[1].y, entity.points[1].z));\n        verts.push(new THREE.Vector3(entity.points[2].x, entity.points[2].y, entity.points[2].z));\n        verts.push(new THREE.Vector3(entity.points[3].x, entity.points[3].y, entity.points[3].z));\n\n        // Calculate which direction the points are facing (clockwise or counter-clockwise)\n        let vector1 = new THREE.Vector3();\n        let vector2 = new THREE.Vector3();\n        vector1.subVectors(verts[1], verts[0]);\n        vector2.subVectors(verts[2], verts[0]);\n        vector1.cross(vector2);\n\n        // If z < 0 then we must draw these in reverse order\n        if (vector1.z < 0) {\n            geometry.faces.push(new THREE.Face3(2, 1, 0));\n            geometry.faces.push(new THREE.Face3(2, 3, 1));\n        } else {\n            geometry.faces.push(new THREE.Face3(0, 1, 2));\n            geometry.faces.push(new THREE.Face3(1, 3, 2));\n        }\n\n        material = new THREE.MeshBasicMaterial({\n            color: this.__getColor(entity, dxfDb)\n        });\n\n        return new THREE.Mesh(geometry, material);\n    }\n\n    /**\n     * Vectorize Text\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawText(entity, dxfDb) {\n        let geometry,\n            material,\n            text;\n\n        if (!this.font) return console.warn('Text is not supported without a Three.js font loaded with THREE.FontLoader! Load a font of your choice and pass this into the constructor. See the sample for this repository or Three.js examples at http://threejs.org/examples/?q=text#webgl_geometry_text for more details.');\n\n        geometry = new THREE.TextGeometry(entity.text, {\n            font: this.font,\n            height: 0,\n            size: entity.textHeight || 12\n        });\n\n        material = new THREE.MeshBasicMaterial({\n            color: this.__getColor(entity, dxfDb)\n        });\n\n        text = new THREE.Mesh(geometry, material);\n        text.position.x = entity.startPoint.x;\n        text.position.y = entity.startPoint.y;\n        text.position.z = entity.startPoint.z;\n\n        return text;\n    }\n\n    /**\n     * Vectorize Point\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawPoint(entity, dxfDb) {\n        let geometry, material, point;\n\n        geometry = new THREE.Geometry();\n\n        geometry.vertices.push(new THREE.Vector3(entity.position.x, entity.position.y, entity.position.z));\n\n        // TODO: could be more efficient. PointCloud per layer?\n\n        let numPoints = 1;\n\n        let color = this.__getColor(entity, dxfDb);\n        let colors = new Float32Array(numPoints * 3);\n        colors[0] = color.r;\n        colors[1] = color.g;\n        colors[2] = color.b;\n\n        geometry.colors = colors;\n        geometry.computeBoundingBox();\n\n        material = new THREE.PointsMaterial({\n            size: 0.05,\n            vertexColors: THREE.VertexColors\n        });\n\n        return new THREE.Points(geometry, material);\n    }\n\n    /**\n     * Vectorize Block\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __drawBlock(entity, dxfDb) {\n        let block = dxfDb.blocks[entity.name];\n\n        if (!block.entities) return null;\n\n        let group = new THREE.Object3D();\n\n        if (entity.xScale) group.scale.x = entity.xScale;\n        if (entity.yScale) group.scale.y = entity.yScale;\n\n        if (entity.rotation) {\n            group.rotation.z = entity.rotation * Math.PI / 180;\n        }\n\n        if (entity.position) {\n            group.position.x = entity.position.x;\n            group.position.y = entity.position.y;\n            group.position.z = entity.position.z;\n        }\n\n        for (let i = 0; i < block.entities.length; i++) {\n            let childEntity = this.drawEntity(block.entities[i], dxfDb, group);\n            if (childEntity) group.add(childEntity);\n        }\n\n        return group;\n    }\n\n    /**\n     * Compute entity Color\n     * @private\n     * @param {Object} entity - entity dxfDb\n     * @param {Object} dxfDb - dxf Database\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    __getColor(entity, dxfDb) {\n        let color = 0x000000; //default\n        if (entity.color) color = entity.color;\n        else if (dxfDb.tables && dxfDb.tables.LAYER && dxfDb.tables.LAYER.LAYER[entity.layer])\n            color = dxfDb.tables.LAYER.LAYER[entity.layer].color;\n\n        if (color == null || color === 0xffffff) {\n            color = 0x000000;\n        }\n        return color;\n    }\n}\n",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/engine/vectorizer/DXFVectorizer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "angle2",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~angle2",
    "access": "public",
    "export": false,
    "importPath": "cadincloud/lib/engine/vectorizer/DXFVectorizer.js",
    "importStyle": null,
    "description": "Returns the angle in radians of the vector (p1,p2). In other words, imagine\nputting the base of the vector at coordinates (0,0) and finding the angle\nfrom vector (1,0) to (p1,p2).",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": "start point of the vector"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": "end point of the vector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the angle"
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "polar",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~polar",
    "access": "public",
    "export": false,
    "importPath": "cadincloud/lib/engine/vectorizer/DXFVectorizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "point",
        "types": [
          "*"
        ]
      },
      {
        "name": "distance",
        "types": [
          "*"
        ]
      },
      {
        "name": "angle",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "BulgeGeometry",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~BulgeGeometry",
    "access": "public",
    "export": false,
    "importPath": "cadincloud/lib/engine/vectorizer/DXFVectorizer.js",
    "importStyle": null,
    "description": "Calculates points for a curve between two points",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "startPoint",
        "description": "the starting point of the curve"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "endPoint",
        "description": "the ending point of the curve"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bulge",
        "description": "a value indicating how much to curve"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": "number of segments between the two given points"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "class",
    "name": "DXFVectorizer",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js",
    "static": true,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/engine/vectorizer/DXFVectorizer.js",
    "importStyle": "DXFVectorizer",
    "description": "",
    "examples": [
      "let dxfVectorizer = new DXFVectorizer()"
    ],
    "lineNumber": 71,
    "interface": false,
    "extends": [
      "Vectorizer"
    ]
  },
  {
    "__docId__": 123,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#constructor",
    "access": "public",
    "description": "Creates an instance of DXFVectorizer.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "drawEntity",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#drawEntity",
    "access": "public",
    "description": "Vectorize to draw",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "__drawEllipse",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawEllipse",
    "access": "private",
    "description": "Vectorize Ellipse",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "__drawLine",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawLine",
    "access": "private",
    "description": "Vectorize Line",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "__drawMtext",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawMtext",
    "access": "private",
    "description": "Vectorize Mtext",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "__drawSpline",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawSpline",
    "access": "private",
    "description": "Vectorize Spline",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "__drawArc",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawArc",
    "access": "private",
    "description": "Vectorize Arc/Circle",
    "lineNumber": 354,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "__drawSolid",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawSolid",
    "access": "private",
    "description": "Vectorize Solid",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "__drawText",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawText",
    "access": "private",
    "description": "Vectorize Text",
    "lineNumber": 432,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "__drawPoint",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawPoint",
    "access": "private",
    "description": "Vectorize Point",
    "lineNumber": 465,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "__drawBlock",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__drawBlock",
    "access": "private",
    "description": "Vectorize Block",
    "lineNumber": 501,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "__getColor",
    "memberof": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/DXFVectorizer.js~DXFVectorizer#__getColor",
    "access": "private",
    "description": "Compute entity Color",
    "lineNumber": 537,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity dxfDb"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "dxf Database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "lib/engine/vectorizer/Vectorizer.js",
    "content": "import assert from 'assert';\n\n/**\n * Represent Vectorizer\n * @interface Vectorizer\n */\nexport default class Vectorizer {\n    /**\n     * Creates an instance of DXFVectorizer.\n     * @memberof Vectorizer\n     */\n    constructor() { }\n\n    /**\n     * Vectorize to draw\n     * @param {Object} entity - entity object\n     * @param {Object} dxfDb - database object\n     * @return {THREE.Mesh}\n     * @memberof DXFVectorizer\n     */\n    drawEntity(entity, db) {\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\n    }\n\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/engine/vectorizer/Vectorizer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "class",
    "name": "Vectorizer",
    "memberof": "lib/engine/vectorizer/Vectorizer.js",
    "static": true,
    "longname": "lib/engine/vectorizer/Vectorizer.js~Vectorizer",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/engine/vectorizer/Vectorizer.js",
    "importStyle": "Vectorizer",
    "description": "Represent Vectorizer",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 137,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/engine/vectorizer/Vectorizer.js~Vectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/Vectorizer.js~Vectorizer#constructor",
    "access": "public",
    "description": "Creates an instance of DXFVectorizer.",
    "lineNumber": 12
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "drawEntity",
    "memberof": "lib/engine/vectorizer/Vectorizer.js~Vectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/vectorizer/Vectorizer.js~Vectorizer#drawEntity",
    "access": "public",
    "description": "Vectorize to draw",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "entity object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfDb",
        "description": "database object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Mesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "lib/engine/viewer/DXFViewer.js",
    "content": "import DXFVectorizer from '../vectorizer/DXFVectorizer';\nimport Viewer from './Viewer';\nimport OrbitController from '../controller/OrbitController';\n/**\n *\n * @extends {Viewer}\n * @class DXFViewer\n * @example\n *  let dxfViewer= new DXFViewer(data, parent, width, height, font) \n */\nexport default class DXFViewer extends Viewer {\n    /**\n     * DXFViewer class for a dxf object.\n     * @constructor\n     * @param {Object} data - the dxf object\n     * @param {Object} parent - the parent element to which we attach the rendering canvas\n     * @param {Number} width - width of the rendering canvas in pixels\n     * @param {Number} height - height of the rendering canvas in pixels\n     * @param {Object} font - a font loaded with THREE.FontLoader \n     */\n    constructor(data, parent, width, height, font) {\n        super();\n        let $parent = $(parent);\n        if (!parent) return null;\n\n        this.width = width || parent.clientWidth;\n        this.height = height || parent.clientHeight;\n        this.aspectRatio = this.height == 0 ? 0 : this.width / this.height;\n        this.font = font;\n        this._parent = parent;\n        this._data = data;\n\n        this._scene = new THREE.Scene();\n        this._vectorizer = new DXFVectorizer();\n        this._vectorizer.font = font;\n        this._viewPort = {};\n        this.__createScene();\n\n        this._camera = new THREE.OrthographicCamera(this._viewPort.left, this._viewPort.right, this._viewPort.top, this._viewPort.bottom, 1, 19);\n        this._camera.position.z = 10;\n        this._camera.position.x = this._viewPort.center.x;\n        this._camera.position.y = this._viewPort.center.y;\n\n        this._renderer = new THREE.WebGLRenderer();\n        this._renderer.setSize(width, height);\n        this._renderer.setClearColor(0xfffffff, 1);\n\n        $parent.append(this._renderer.domElement);\n        $parent.show();\n\n        this.controller = new OrbitController(this._camera, parent);\n        this.controller.target.x = this._camera.position.x;\n        this.controller.target.y = this._camera.position.y;\n        this.controller.target.z = 0;\n        this.controller.config.zoomSpeed = 3;\n\n        this.controller.addEventListener('change', this.render.bind(this));\n        this.render();\n        this.controller.update();\n\n        $parent.on('click', (event) => {\n            let $el = $(this._renderer.domElement);\n\n            let vector = new THREE.Vector3((event.pageX - $el.offset().left) / $el.innerWidth() * 2 - 1, -((event.pageY - $el.offset().top) / $el.innerHeight()) * 2 + 1, 0.5);\n            vector.unproject(this._camera);\n\n            let dir = vector.sub(this._camera.position).normalize();\n\n            let distance = -this._camera.position.z / dir.z;\n\n            let pos = this._camera.position.clone().add(dir.multiplyScalar(distance));\n\n            console.log(pos.x, pos.y); // Position in cad that is clicked\n        });\n    }\n\n    /**\n     * Render the scene\n     * @public \n     */\n    render() {\n        this._renderer.render(this._scene, this._camera);\n    }\n\n    /**\n     * @public\n     */\n    resetZoom() {\n        this._camera.position.z = 10;\n        this._camera.position.x = this._viewPort.center.x;\n        this._camera.position.y = this._viewPort.center.y;\n    };\n\n    resize(width, height) {\n        //update width and height\n        this.width = width;\n        this.height = height;\n        this.aspectRatio = this.aspectRatio = this.height == 0 ? 0 : this.width / this.height;\n\n        //update camera\n        let originalWidth = this._renderer.domElement.width;\n        let originalHeight = this._renderer.domElement.height;\n\n        let hscale = width / originalWidth;\n        let vscale = height / originalHeight;\n\n        this._camera.top = vscale * this._camera.top;\n        this._camera.bottom = vscale * this._camera.bottom;\n        this._camera.left = hscale * this._camera.left;\n        this._camera.right = hscale * this._camera.right;\n\n        //Update renderer\n        let devicePxRatio = window.devicePixelRatio || 1;\n        width = Math.floor(width * devicePxRatio);\n        height = Math.floor(height * devicePxRatio);\n        this._renderer.setSize(width, height);\n        this._renderer.setClearColor(0xfffffff, 1);\n        this.render();\n    }\n\n    __createScene() {\n        let dims = {\n            min: {\n                x: false,\n                y: false,\n                z: false\n            },\n            max: {\n                x: false,\n                y: false,\n                z: false\n            }\n        };\n        for (let i = 0; i < this._data.entities.length; i++) {\n            let entity = this._data.entities[i];\n            let obj = null;\n            if (entity.type === 'DIMENSION') {\n                if (entity.block) {\n                    let block = this._data.blocks[entity.block];\n                    if (!block) {\n                        console.error('Missing referenced block \"' + entity.block + '\"');\n                        continue;\n                    }\n                    for (let j = 0; j < block.entities.length; j++) {\n                        obj = this._vectorizer.drawEntity(block.entities[j], this._data);\n                    }\n                } else {\n                    console.log('WARNING: No block for DIMENSION entity');\n                }\n            } else {\n                obj = this._vectorizer.drawEntity(entity, this._data);\n            }\n\n            if (obj) {\n                let bbox = new THREE.Box3().setFromObject(obj);\n                if (bbox.min.x && (dims.min.x === false || dims.min.x > bbox.min.x)) dims.min.x = bbox.min.x;\n                if (bbox.min.y && (dims.min.y === false || dims.min.y > bbox.min.y)) dims.min.y = bbox.min.y;\n                if (bbox.min.z && (dims.min.z === false || dims.min.z > bbox.min.z)) dims.min.z = bbox.min.z;\n                if (bbox.max.x && (dims.max.x === false || dims.max.x < bbox.max.x)) dims.max.x = bbox.max.x;\n                if (bbox.max.y && (dims.max.y === false || dims.max.y < bbox.max.y)) dims.max.y = bbox.max.y;\n                if (bbox.max.z && (dims.max.z === false || dims.max.z < bbox.max.z)) dims.max.z = bbox.max.z;\n                this._scene.add(obj);\n            }\n        }\n\n        let upperRightCorner = {\n            x: dims.max.x,\n            y: dims.max.y\n        };\n        let lowerLeftCorner = {\n            x: dims.min.x,\n            y: dims.min.y\n        };\n\n        // Figure out the current viewport extents\n        let vp_width = upperRightCorner.x - lowerLeftCorner.x;\n        let vp_height = upperRightCorner.y - lowerLeftCorner.y;\n        let center = {\n            x: vp_width / 2 + lowerLeftCorner.x,\n            y: vp_height / 2 + lowerLeftCorner.y\n        };\n\n        // Fit all objects into current ThreeDXF DXFViewer\n        let extentsAspectRatio = Math.abs(vp_width / vp_height);\n        if (this.aspectRatio > extentsAspectRatio) {\n            vp_width = vp_height * this.aspectRatio;\n        } else {\n            vp_height = vp_width / this.aspectRatio;\n        }\n\n        this._viewPort = {\n            bottom: -vp_height / 2,\n            left: -vp_width / 2,\n            top: vp_height / 2,\n            right: vp_width / 2,\n            center: {\n                x: center.x,\n                y: center.y\n            }\n        };\n    }\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/engine/viewer/DXFViewer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "class",
    "name": "DXFViewer",
    "memberof": "lib/engine/viewer/DXFViewer.js",
    "static": true,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/engine/viewer/DXFViewer.js",
    "importStyle": "DXFViewer",
    "description": "",
    "examples": [
      " let dxfViewer= new DXFViewer(data, parent, width, height, font) "
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DXFViewer"
      }
    ],
    "interface": false,
    "extends": [
      "Viewer"
    ]
  },
  {
    "__docId__": 141,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#constructor",
    "access": "public",
    "description": "DXFViewer class for a dxf object.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "the dxf object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "the parent element to which we attach the rendering canvas"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "width of the rendering canvas in pixels"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "height of the rendering canvas in pixels"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "font",
        "description": "a font loaded with THREE.FontLoader"
      }
    ]
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "width",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#width",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "height",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#height",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "aspectRatio",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#aspectRatio",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "font",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#font",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "_parent",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#_parent",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "_data",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#_data",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "_scene",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#_scene",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "_vectorizer",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#_vectorizer",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "_viewPort",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#_viewPort",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "_camera",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#_camera",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "_renderer",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#_renderer",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "controller",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#controller",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "render",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#render",
    "access": "public",
    "description": "Render the scene",
    "lineNumber": 81,
    "params": [],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "resetZoom",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#resetZoom",
    "access": "public",
    "description": "",
    "lineNumber": 88,
    "params": [],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "resize",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#resize",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "__createScene",
    "memberof": "lib/engine/viewer/DXFViewer.js~DXFViewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/viewer/DXFViewer.js~DXFViewer#__createScene",
    "access": "private",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "lib/engine/viewer/Viewer.js",
    "content": "import assert from 'assert';\n\n/**\n * Parse the input data\n * @interface\n * \n */\nexport default class Viewer {\n    /**\n     * @constructor\n     */\n    constructor() { }\n\n    /**\n     * @public\n     * @param {String} source \n     */\n    parseSync(source) {\n        if (typeof (source) === 'string') {\n            return this.parse(source);\n        } else {\n            console.error('Cannot read dxf source of type `' + typeof (source));\n            return null;\n        }\n    }\n\n    /**\n     * Render the scene\n     * @abstract\n     * @public \n     */\n    render() {\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\n    }\n\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/engine/viewer/Viewer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "Viewer",
    "memberof": "lib/engine/viewer/Viewer.js",
    "static": true,
    "longname": "lib/engine/viewer/Viewer.js~Viewer",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/engine/viewer/Viewer.js",
    "importStyle": "Viewer",
    "description": "Parse the input data",
    "lineNumber": 8,
    "interface": true
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/engine/viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/viewer/Viewer.js~Viewer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "parseSync",
    "memberof": "lib/engine/viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/viewer/Viewer.js~Viewer#parseSync",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "render",
    "memberof": "lib/engine/viewer/Viewer.js~Viewer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/engine/viewer/Viewer.js~Viewer#render",
    "access": "public",
    "description": "Render the scene",
    "lineNumber": 32,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "lib/parsers/DXFParser.js",
    "content": "import DXFScanner from \"../scanners/DXFScanner\";\r\nimport Parser from \"./Parser\";\r\nimport AUTO_CAD_COLOR_INDEX from './dxf/AutoCadColorIndex';\r\nimport LINE from \"./dxf/entities/Line\";\r\nimport ARC from \"./dxf/entities/Arc\";\r\nimport CIRCLE from \"./dxf/entities/Circle\";\r\nimport MTEXT from \"./dxf/entities/Mtext\";\r\nimport POINT from \"./dxf/entities/Point\";\r\nimport VERTEX from \"./dxf/entities/Vertex\";\r\nimport TEXT from \"./dxf/entities/Text\";\r\nimport SPLINE from \"./dxf/entities/Spline\";\r\nimport ELLIPSE from \"./dxf/entities/Ellipse\";\r\nimport INSERT from \"./dxf/entities/Insert\";\r\nimport SOLID from \"./dxf/entities/Solid\";\r\nimport ATTDEF from \"./dxf/entities/AttDef\";\r\nimport DIMENSION from \"./dxf/entities/Dimension\";\r\nimport LWPOLYLINE from \"./dxf/entities/LWPolyline\";\r\n\r\n/**\r\n * @public\r\n * @extends {Parser}\r\n * @example \r\n * let dxfParser = new DXFParser()\r\n */\r\nexport default class DXFParser extends Parser {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Parse the DXF data\r\n     * @override\r\n     * @public\r\n     * @param {String} dxfString - DXF data\r\n     */\r\n    parse(dxfString) {\r\n        let scanner = new DXFScanner(dxfString.split(/\\r\\n|\\r|\\n/g));\r\n        if (!scanner.hasNext()) throw Error(\"Empty File\");\r\n        return this.__pasrseSections(scanner);\r\n    }\r\n\r\n    /**\r\n     * General information about the drawing is found in various section. \r\n     * 1. HEADER\r\n     * 2. CLASS\r\n     * 3. TABLES\r\n     * 4. BLOCKS\r\n     * 5. ENTITIES\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} dxfString\r\n     */\r\n    __pasrseSections(scanner) {\r\n        let dxf = {};\r\n        while (!scanner.isEOF()) {\r\n            if (scanner.isStartOfSection()) {\r\n                let group = scanner.next().peek();\r\n                // Be sure we are reading a section code\r\n                if (group.code !== 2) {\r\n                    console.error('Unexpected code %s after 0:SECTION %j', group);\r\n                    continue;\r\n                }\r\n\r\n                if (group.value === 'HEADER') {\r\n                    console.log('> HEADER');\r\n                    dxf.header = this.__parseHeaderSection(scanner);\r\n                    console.log('<');\r\n                } else if (group.value === 'BLOCKS') {\r\n                    console.log('> BLOCKS');\r\n                    dxf.blocks = this.__parseBlockSection(scanner);\r\n                    console.log('<');\r\n                } else if (group.value === 'ENTITIES') {\r\n                    console.log('> ENTITIES');\r\n                    dxf.entities = this.__parseEntitiesSection(scanner);\r\n                    console.log('<');\r\n                } else if (group.value === 'TABLES') {\r\n                    console.log('> TABLES');\r\n                    dxf.tables = this.__parseTablesSection(scanner);\r\n                    console.log('<');\r\n                } else if (group.value === 'EOF') {\r\n                    console.log('EOF');\r\n                } else {\r\n                    console.warn('Skipping section \\'%s\\'', group.value);\r\n                }\r\n            } else {\r\n                scanner.next();\r\n            }\r\n        }\r\n        return dxf;\r\n    }\r\n\r\n    /**\r\n     * General information about the drawing is found in this section. \r\n     * It consists of an DXF database version number and a number of system variables. \r\n     * Each parameter contains a variable name and its associated value.\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} header section\r\n     */\r\n    __parseHeaderSection(scanner) {\r\n        let header = {}\r\n        console.log(this);\r\n        while (!scanner.isEndOfSection()) {\r\n            let group = scanner.next().peek();\r\n            if (group.code === 9) {\r\n                let variableName = group.value;\r\n                group = scanner.next().peek();\r\n                if (group.code === 10) {\r\n                    header[variableName] = this.__parsePoint(scanner);\r\n                } else {\r\n                    header[variableName] = group.value;\r\n                }\r\n            }\r\n        }\r\n        return header;\r\n    }\r\n\r\n    /**\r\n     * This section contains definitions for the following symbol tables.\r\n     * 1. APPID (application identification table)\r\n     * 2. BLOCK_RECORD (block reference table)\r\n     * 3. DIMSTYLE (dimension style table)\r\n     * 4. LAYER (layer table)\r\n     * 5. LTYPE (linetype table)\r\n     * 6. STYLE (text style table)\r\n     * 7. UCS (User Coordinate System table)\r\n     * 8. VIEW (view table)\r\n     * 9. VPORT (tableRecord configuration table)\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} table section\r\n     */\r\n    __parseTablesSection(scanner) {\r\n        let tables = {};\r\n        while (!scanner.isEndOfSection()) {\r\n            let group = scanner.next().peek();\r\n            if (scanner.isStartOfTable()) {\r\n                group = scanner.next().peek();\r\n                tables[group.value] = this.__parseTable(scanner);\r\n            }\r\n        }\r\n        return tables;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {DXFScanner} scanner \r\n     */\r\n    __parseTable(scanner) {\r\n        let table = {};\r\n        while (!scanner.isEndOfTable()) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 5:\r\n                    table.handel = group.value;\r\n                    break;\r\n                case 70:\r\n                    table.maxEntries = group.value;\r\n                    break;\r\n                case 330:\r\n                    table.softOwnerHandel = group.value;\r\n                    break;\r\n                case 102:\r\n                    table[group.value.slice(1)] = this.__parseAppGroup(scanner);\r\n                    break;\r\n                case 0:\r\n                    table[group.value] = this.__parseTableRecords(scanner);\r\n                    break;\r\n                case 100:\r\n                default:\r\n                    console.log(\"Unhandel group %j\", group);\r\n            }\r\n        }\r\n        return table;\r\n    }\r\n\r\n    /**\r\n     * Table entries\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} appGroup object\r\n     */\r\n    __parseTableRecords(scanner) {\r\n        let group = scanner.peek();\r\n        switch (group.value) {\r\n            case 'LTYPE':\r\n                return this.__parseLineTypeRecords(scanner);\r\n            case 'VPORT':\r\n                return this.__parseViewPortRecords(scanner);\r\n            case 'LAYER':\r\n                return this.__parseLayerRecords(scanner);\r\n            case 'DIMSTYLE':\r\n                return this.__parseDimStyleRecords(scanner);\r\n            case 'BLOCK_RECORD ':\r\n            case 'STYLE':\r\n            case 'UCS':\r\n            case 'VIEW':\r\n            case 'APPID':\r\n            default:\r\n                console.log('Unhandel group %j', group);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parese line type records\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} line type records object\r\n     */\r\n    __parseLineTypeRecords(scanner) {\r\n        let length,\r\n            tableRecords = {},\r\n            tableRecord = {};\r\n        while (!scanner.isEndOfTable()) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 5:\r\n                    tableRecord.handel = group.value;\r\n                    break;\r\n                case 102:\r\n                    tableRecord[group.value.slice(1)] = this.__parseAppGroup(scanner);\r\n                    break;\r\n                case 2:\r\n                    tableRecord.name = group.value;\r\n                    break;\r\n                case 3:\r\n                    tableRecord.description = group.value;\r\n                    break;\r\n                case 73: // Number of elements for this line type (dots, dashes, spaces);\r\n                    tableRecord.elements = group.value;\r\n                    if (tableRecord.elements > 0) tableRecord.pattern = [];\r\n                    break;\r\n                case 40: // total pattern length\r\n                    tableRecord.patternLength = group.value;\r\n                    break;\r\n                case 49:\r\n                    tableRecord.pattern.push(group.value);\r\n                    break;\r\n                case 0:\r\n                    if (tableRecord.elements > 0 && tableRecord.elements !== tableRecord.pattern.length)\r\n                        log.warn('lengths do not match on LTYPE pattern');\r\n                    tableRecords[tableRecord.name] = tableRecord;\r\n                    tableRecord = {};\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n        return tableRecords;\r\n    }\r\n\r\n    /**\r\n     * Parse view ports records\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} view ports records object\r\n     */\r\n    __parseViewPortRecords(scanner) {\r\n        var tableRecords = [], // Multiple table entries may have the same name indicating a multiple tableRecord configuration\r\n            tableRecord = {};\r\n        while (!scanner.isEndOfTable()) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 2: // layer name\r\n                    tableRecord.name = group.value;\r\n                    break;\r\n                case 5:\r\n                    tableRecord.handel = group.value;\r\n                    break;\r\n                case 10:\r\n                    tableRecord.lowerLeftCorner = this.__parsePoint(scanner);\r\n                    break;\r\n                case 11:\r\n                    tableRecord.upperRightCorner = this.__parsePoint(scanner);\r\n                    break;\r\n                case 12:\r\n                    tableRecord.center = this.__parsePoint(scanner);\r\n                    break;\r\n                case 13:\r\n                    tableRecord.snapBasePoint = this.__parsePoint(scanner);\r\n                    break;\r\n                case 14:\r\n                    tableRecord.snapSpacing = this.__parsePoint(scanner);\r\n                    break;\r\n                case 15:\r\n                    tableRecord.gridSpacing = this.__parsePoint(scanner);\r\n                    break;\r\n                case 16:\r\n                    tableRecord.viewDirectionFromTarget = this.__parsePoint(scanner);\r\n                    break;\r\n                case 17:\r\n                    tableRecord.viewTarget = this.__parsePoint(scanner);\r\n                    break;\r\n                case 42:\r\n                    tableRecord.lensLength = group.value;\r\n                    break;\r\n                case 43:\r\n                    tableRecord.frontClippingPlane = group.value;\r\n                    break;\r\n                case 44:\r\n                    tableRecord.backClippingPlane = group.value;\r\n                    break;\r\n                case 45:\r\n                    tableRecord.viewHeight = group.value;\r\n                    break;\r\n                case 50:\r\n                    tableRecord.snapRotationAngle = group.value;\r\n                    break;\r\n                case 51:\r\n                    tableRecord.viewTwistAngle = group.value;\r\n                    break;\r\n                case 79:\r\n                    tableRecord.orthographicType = group.value;\r\n                    break;\r\n                case 102:\r\n                    tableRecord[group.value.slice(1)] = this.__parseAppGroup(scanner);\r\n                    break;\r\n                case 110:\r\n                    tableRecord.ucsOrigin = this.__parsePoint(scanner);\r\n                    break;\r\n                case 111:\r\n                    tableRecord.ucsXAxis = this.__parsePoint(scanner);\r\n                    break;\r\n                case 112:\r\n                    tableRecord.ucsYAxis = this.__parsePoint(scanner);\r\n                    break;\r\n                case 110:\r\n                    tableRecord.ucsOrigin = this.__parsePoint(scanner);\r\n                    break;\r\n                case 281:\r\n                    tableRecord.renderMode = group.value;\r\n                    break;\r\n                case 281:\r\n                    // 0 is one distant light, 1 is two distant lights\r\n                    tableRecord.defaultLightingType = group.value;;\r\n                    break;\r\n                case 292:\r\n                    tableRecord.defaultLightingOn = group.value;\r\n                    break;\r\n                case 330:\r\n                    tableRecord.ownerHandle = group.value;\r\n                    break;\r\n                case 63:\r\n                case 421:\r\n                case 431:\r\n                    tableRecord.ambientColor = group.value;\r\n                    break;\r\n                case 0:\r\n                    tableRecords.push(tableRecord);\r\n                    tableRecord = {};\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n        return tableRecords;\r\n    }\r\n\r\n    /**\r\n     * Parse layer records\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} layer records object\r\n     */\r\n    __parseLayerRecords(scanner) {\r\n        var tableRecords = {},\r\n            tableRecord = {};\r\n        while (!scanner.isEndOfTable()) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 2: // layer name\r\n                    tableRecord.name = group.value;\r\n                    break;\r\n                case 5:\r\n                    tableRecord.handel = group.value;\r\n                    break;\r\n                case 6: // Linetype name\r\n                    tableRecord.lineType = group.value;\r\n                    break;\r\n                case 62: // color, visibility\r\n                    tableRecord.visible = group.value >= 0; //Color number (if negative, layer is Off)\r\n                    // TODO 0 and 256 are BYBLOCK and BYLAYER respectively. Need to handle these values for layers?.\r\n                    let color = this.__getAcadColor(Math.abs(group.value));\r\n                    if (color)\r\n                        tableRecord.color = color;\r\n                    break;\r\n                case 70: // frozen layer\r\n                    //1 = Layer is frozen, otherwise layer is thawed \r\n                    //2 = Layer is frozen by default in new viewports\r\n                    //4 = Layer is locked\r\n                    tableRecord.frozen = ((group.value & 1) != 0 || (group.value & 2) != 0);\r\n                    break;\r\n                case 102:\r\n                    tableRecord[group.value.slice(1)] = this.__parseAppGroup(scanner);\r\n                    break;\r\n                case 0:\r\n                    tableRecords[tableRecord.name] = tableRecord;\r\n                    tableRecord = {};\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n        return tableRecords;\r\n    }\r\n\r\n    /**\r\n     * Parse dim style records\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} dim style records object\r\n     */\r\n    __parseDimStyleRecords(scanner) {\r\n        var tableRecords = {},\r\n            tableRecord = {};\r\n        while (!scanner.isEndOfTable()) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 2: // layer name\r\n                    tableRecord.name = group.value;\r\n                    break;\r\n                case 3:\r\n                    tableRecord.DIMPOST = group.value;\r\n                    break;\r\n                case 4:\r\n                    tableRecord.DIMAPOST = group.value;\r\n                    break;\r\n                case 5:\r\n                    tableRecord.DIMBLK = group.value;\r\n                    break;\r\n                case 6:\r\n                    tableRecord.DIMBLK1 = group.value;\r\n                    break;\r\n                case 7:\r\n                    tableRecord.DIMBLK2 = group.value;\r\n                    break;\r\n                case 40:\r\n                    tableRecord.DIMSCALE = group.value;\r\n                    break;\r\n                case 41:\r\n                    tableRecord.DIMASZ = group.value;\r\n                    break;\r\n                case 42:\r\n                    tableRecord.DIMEXO = group.value;\r\n                    break;\r\n                case 43:\r\n                    tableRecord.DIMDLI = group.value;\r\n                    break;\r\n                case 44:\r\n                    tableRecord.DIMEXE = group.value;\r\n                    break;\r\n                case 45:\r\n                    tableRecord.DIMRND = group.value;\r\n                    break;\r\n                case 46:\r\n                    tableRecord.DIMDLE = group.value;\r\n                    break;\r\n                case 47:\r\n                    tableRecord.DIMTP = group.value;\r\n                    break;\r\n                case 48:\r\n                    tableRecord.DIMTM = group.value;\r\n                    break;\r\n                case 140:\r\n                    tableRecord.DIMTXT = group.value;\r\n                    break;\r\n                case 141:\r\n                    tableRecord.DIMCEN = group.value;\r\n                    break;\r\n                case 142:\r\n                    tableRecord.DIMTSZ = group.value;\r\n                    break;\r\n                case 143:\r\n                    tableRecord.DIMALTF = group.value;\r\n                    break;\r\n                case 144:\r\n                    tableRecord.DIMLFAC = group.value;\r\n                    break;\r\n                case 145:\r\n                    tableRecord.DIMTVP = group.value;\r\n                    break;\r\n                case 146:\r\n                    tableRecord.DIMTFAC = group.value;\r\n                    break;\r\n                case 147:\r\n                    tableRecord.DIMGAP = group.value;\r\n                    break;\r\n                case 71:\r\n                    tableRecord.DIMTOL = group.value;\r\n                    break;\r\n                case 72:\r\n                    tableRecord.DIMLIM = group.value;\r\n                    break;\r\n                case 73:\r\n                    tableRecord.DIMTIH = group.value;\r\n                    break;\r\n                case 74:\r\n                    tableRecord.DIMTOH = group.value;\r\n                    break;\r\n                case 75:\r\n                    tableRecord.DIMSE1 = group.value;\r\n                    break;\r\n                case 76:\r\n                    tableRecord.DIMSE2 = group.value;\r\n                    break;\r\n                case 77:\r\n                    tableRecord.DIMTAD = group.value;\r\n                    break;\r\n                case 78:\r\n                    tableRecord.DIMZIN = group.value;\r\n                    break;\r\n                case 170:\r\n                    tableRecord.DIMALT = group.value;\r\n                    break;\r\n                case 171:\r\n                    tableRecord.DIMALTD = group.value;\r\n                    break;\r\n                case 172:\r\n                    tableRecord.DIMTOFL = group.value;\r\n                    break;\r\n                case 173:\r\n                    tableRecord.DIMSAH = group.value;\r\n                    break;\r\n                case 174:\r\n                    tableRecord.DIMTIX = group.value;\r\n                    break;\r\n                case 175:\r\n                    tableRecord.DIMSOXD = group.value;\r\n                    break;\r\n                case 176:\r\n                    tableRecord.DIMDLRD = group.value;\r\n                    break;\r\n                case 177:\r\n                    tableRecord.DIMCLRE = group.value;\r\n                    break;\r\n                case 178:\r\n                    tableRecord.DIMCLRT = group.value;\r\n                    break;\r\n                case 270:\r\n                    tableRecord.DIMUNIT = group.value;\r\n                    break;\r\n                case 271:\r\n                    tableRecord.DIMDEC = group.value;\r\n                    break;\r\n                case 272:\r\n                    tableRecord.DIMTDEC = group.value;\r\n                    break;\r\n                case 273:\r\n                    tableRecord.DIMALTU = group.value;\r\n                    break;\r\n                case 274:\r\n                    tableRecord.DIMALTTD = group.value;\r\n                    break;\r\n                case 275:\r\n                    tableRecord.DIMAUNIT = group.value;\r\n                    break;\r\n                case 280:\r\n                    tableRecord.DIMJUST = group.value;\r\n                    break;\r\n                case 281:\r\n                    tableRecord.DIMSD1 = group.value;\r\n                    break;\r\n                case 282:\r\n                    tableRecord.DIMSD2 = group.value;\r\n                    break;\r\n                case 283:\r\n                    tableRecord.DIMTOLJ = group.value;\r\n                    break;\r\n                case 284:\r\n                    tableRecord.DIMTZIN = group.value;\r\n                    break;\r\n                case 285:\r\n                    tableRecord.DIMALTZ = group.value;\r\n                    break;\r\n                case 286:\r\n                    tableRecord.DIMALTTZ = group.value;\r\n                    break;\r\n                case 287:\r\n                    tableRecord.DIMFIT = group.value;\r\n                    break;\r\n                case 288:\r\n                    tableRecord.DIMUPT = group.value;\r\n                    break;\r\n                case 340:\r\n                    tableRecord.textStyleHandel = group.value;\r\n                    break;\r\n                case 105:\r\n                    tableRecord.handel = group.value;\r\n                    break;\r\n                case 70:\r\n                    tableRecord.stdFlag = group.value;\r\n                    break;\r\n                case 102:\r\n                    tableRecord[group.value.slice(1)] = this.__parseAppGroup(scanner);\r\n                    break;\r\n                case 0:\r\n                    tableRecords[tableRecord.name] = tableRecord;\r\n                    tableRecord = {};\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n        return tableRecords;\r\n    }\r\n\r\n    /**\r\n     * Contains block definition and drawing entities that make up each block \r\n     * reference in the drawing.\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} block section\r\n     */\r\n    __parseBlockSection(scanner) {\r\n        return this.__parseBlocks(scanner);;\r\n    }\r\n\r\n    /**\r\n     * Contains block definition and drawing entities that make up each block \r\n     * reference in the drawing.\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} block section\r\n     */\r\n    __parseBlocks(scanner) {\r\n        let blocks = {},\r\n            block = {};\r\n        while (!scanner.isEndOfSection()) {\r\n            scanner.next();\r\n            if (scanner.isStartOfBlock()) {\r\n                block.beginBlock = this.__parseBeginBlock(scanner);\r\n            } else if (scanner.isEndOfBlock()) {\r\n                block.endBlock = this.__parseEndBlock(scanner);\r\n                if (!block.beginBlock.name)\r\n                    console.error('block with handle \"' + block.beginBlock.handle + '\" is missing a name.');\r\n                else\r\n                    blocks[block.beginBlock.name] = block;\r\n                block = {};\r\n            } else if (scanner.peek().code == 0) {\r\n                let entity = this.__parseEntity(scanner);\r\n                if (entity) {\r\n                    if (!block.entities)\r\n                        block.entities = [];\r\n                    block.entities.push(entity);\r\n                    scanner.rewind();\r\n                }\r\n            } else {\r\n                console.log('Unhandel group %j', scanner.peek());\r\n            }\r\n        }\r\n        return blocks;\r\n    }\r\n\r\n    /**\r\n     * Begins each block entry (a block entity definition)\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} a block entity definition\r\n     */\r\n    __parseBeginBlock(scanner) {\r\n        let block = {};\r\n        while (true) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 0:\r\n                    scanner.rewind();\r\n                    return block;\r\n                case 1:\r\n                    block.xrefPath = group.value;\r\n                    break;\r\n                case 2:\r\n                    block.name = group.value;\r\n                    break;\r\n                case 3:\r\n                    block.altName = group.value;\r\n                    break;\r\n                case 5:\r\n                    block.handle = group.value;\r\n                    break;\r\n                case 8:\r\n                    block.layer = group.value;\r\n                    break;\r\n                case 10:\r\n                    block.position = this.__parsePoint(scanner);\r\n                    break;\r\n                case 67:\r\n                    block.paperSpace = (group.value && group.value == 1) ? true : false;\r\n                    break;\r\n                case 70:\r\n                    if (group.value != 0) {\r\n                        block.type = group.value;\r\n                    }\r\n                    break;\r\n                case 102:\r\n                    block[group.value.slice(1)] = this.__parseAppGroup(scanner);\r\n                    break;\r\n                case 330:\r\n                    block.ownerHandle = group.value;\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * End of each block entry (an endblk entity definition)\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} an endblk entity definition\r\n     */\r\n    __parseEndBlock(scanner) {\r\n        let block = {};\r\n        while (!scanner.isCurrentGroup(100, 'AcDbBlockEnd')) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 5:\r\n                    block.handle = group.value;\r\n                    break;\r\n                case 102:\r\n                    block[group.value.slice(1)] = this.__parseAppGroup(scanner);\r\n                    break;\r\n                case 330:\r\n                    block.ownerHandle = group.value;\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n        return block;\r\n    }\r\n\r\n    /**\r\n     * This section contains the graphical objects (entities) in the drawing,\r\n     * including block references (insert entities).\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} entities section\r\n     */\r\n    __parseEntitiesSection(scanner) {\r\n        let entities = [];\r\n        while (!scanner.isEndOfSection()) {\r\n            let group = scanner.next().peek();\r\n            if (group.code === 0) {\r\n                let entity = this.__parseEntity(scanner);\r\n                if (entity)\r\n                    entities.push(entity);\r\n            }\r\n        }\r\n        return entities;\r\n    }\r\n\r\n    /**\r\n     * Parse drawing entity\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} entity object\r\n     */\r\n    __parseEntity(scanner) {\r\n        let group = scanner.peek();\r\n        let entity = null;\r\n        switch (group.value) {\r\n            case 'LINE':\r\n                scanner.rewind();\r\n                entity = LINE.parse(scanner);\r\n                break;\r\n            case 'ARC':\r\n                scanner.rewind();\r\n                entity = ARC.parse(scanner);\r\n                break;\r\n            case 'CIRCLE':\r\n                scanner.rewind();\r\n                entity = CIRCLE.parse(scanner);\r\n                break;\r\n            case 'MTEXT':\r\n                scanner.rewind();\r\n                entity = MTEXT.parse(scanner);\r\n                break;\r\n            case 'POINT':\r\n                scanner.rewind();\r\n                entity = POINT.parse(scanner);\r\n                break;\r\n            case 'VERTEX':\r\n                scanner.rewind();\r\n                entity = VERTEX.parse(scanner);\r\n                break;\r\n            case 'SPLINE':\r\n                scanner.rewind();\r\n                entity = SPLINE.parse(scanner);\r\n                break;\r\n            case 'TEXT':\r\n                scanner.rewind();\r\n                entity = TEXT.parse(scanner);\r\n                break;\r\n            case 'ELLIPSE':\r\n                scanner.rewind();\r\n                entity = ELLIPSE.parse(scanner);\r\n                break;\r\n            case 'INSERT':\r\n                scanner.rewind();\r\n                entity = INSERT.parse(scanner);\r\n                break;\r\n            case 'SOLID':\r\n                scanner.rewind();\r\n                entity = SOLID.parse(scanner);\r\n                break;\r\n            case 'ATTDEF':\r\n                scanner.rewind();\r\n                entity = ATTDEF.parse(scanner);\r\n                break;\r\n            case 'DIMENSION':\r\n                scanner.rewind();\r\n                entity = DIMENSION.parse(scanner);\r\n                break;\r\n            case 'LWPOLYLINE':\r\n                scanner.rewind();\r\n                entity = LWPOLYLINE.parse(scanner);\r\n                break;\r\n\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /**\r\n     * Returns the color value of the given AutoCad color index value\r\n     * @private\r\n     * @param {Number} index - color index\r\n     * @return {Number} color value as a number\r\n     */\r\n    __getAcadColor(index) {\r\n        return AUTO_CAD_COLOR_INDEX[index];\r\n    }\r\n\r\n    /**\r\n     * Indicates the start of an extension dictionary group. This g roup exists\r\n     * only if persistent reactors have been attached to this object (optional)\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} appGroup object\r\n     */\r\n    __parseAppGroup(scanner) {\r\n        let appGroup = {};\r\n        while (!scanner.isEndOfAppGroup()) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 360:\r\n                    appGroup.softOwnerHandel = group.value;\r\n                    break;\r\n                case 330:\r\n                    appGroup.hardOwnerHandel = group.value;\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n        return appGroup;\r\n    }\r\n\r\n    /**\r\n     * Parses a 2D or 3D point, returning it as an object with x, y, and\r\n     * (sometimes) z property if it is 3D. It is assumed the current group\r\n     * is x of the point being read in, and scanner.next() will return the\r\n     * y. The parser will determine if there is a z point automatically.\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @return {Object} The 2D or 3D point as an object with x, y[, z]\r\n     */\r\n    __parsePoint(scanner) {\r\n        let point = {},\r\n            group = scanner.peek(),\r\n            code = group.code; // group code for X-Coordinate\r\n\r\n        point.x = group.value;\r\n        code += 10; // group code for Y-Coordinate is at 10 code offset from X-Coordinate\r\n        group = scanner.next().peek();\r\n        if (group.code != code) {\r\n            scanner.rewind();\r\n            return point;\r\n        }\r\n\r\n        point.y = group.value;\r\n        code += 10; // group code for Z-Coordinate is at 10 code offset from Y-Coordinate\r\n        group = scanner.next().peek();\r\n        if (group.code != code) {\r\n            scanner.rewind();\r\n            return point;\r\n        }\r\n\r\n        point.z = group.value;\r\n\r\n        return point;\r\n    }\r\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/DXFParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "DXFParser",
    "memberof": "lib/parsers/DXFParser.js",
    "static": true,
    "longname": "lib/parsers/DXFParser.js~DXFParser",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/DXFParser.js",
    "importStyle": "DXFParser",
    "description": "",
    "examples": [
      "let dxfParser = new DXFParser()"
    ],
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "Parser"
    ]
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#parse",
    "access": "public",
    "description": "Parse the DXF data",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfString",
        "description": "DXF data"
      }
    ],
    "override": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "__pasrseSections",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__pasrseSections",
    "access": "private",
    "description": "General information about the drawing is found in various section. \n1. HEADER\n2. CLASS\n3. TABLES\n4. BLOCKS\n5. ENTITIES",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} dxfString"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "dxfString"
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "__parseHeaderSection",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseHeaderSection",
    "access": "private",
    "description": "General information about the drawing is found in this section. \nIt consists of an DXF database version number and a number of system variables. \nEach parameter contains a variable name and its associated value.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} header section"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "header section"
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "__parseTablesSection",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseTablesSection",
    "access": "private",
    "description": "This section contains definitions for the following symbol tables.\n1. APPID (application identification table)\n2. BLOCK_RECORD (block reference table)\n3. DIMSTYLE (dimension style table)\n4. LAYER (layer table)\n5. LTYPE (linetype table)\n6. STYLE (text style table)\n7. UCS (User Coordinate System table)\n8. VIEW (view table)\n9. VPORT (tableRecord configuration table)",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} table section"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "table section"
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "__parseTable",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseTable",
    "access": "private",
    "description": "",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "__parseTableRecords",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseTableRecords",
    "access": "private",
    "description": "Table entries",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} appGroup object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "appGroup object"
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "__parseLineTypeRecords",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseLineTypeRecords",
    "access": "private",
    "description": "Parese line type records",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} line type records object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "line type records object"
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "__parseViewPortRecords",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseViewPortRecords",
    "access": "private",
    "description": "Parse view ports records",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} view ports records object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "view ports records object"
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "__parseLayerRecords",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseLayerRecords",
    "access": "private",
    "description": "Parse layer records",
    "lineNumber": 368,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} layer records object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "layer records object"
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "__parseDimStyleRecords",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseDimStyleRecords",
    "access": "private",
    "description": "Parse dim style records",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} dim style records object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "dim style records object"
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "__parseBlockSection",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseBlockSection",
    "access": "private",
    "description": "Contains block definition and drawing entities that make up each block \nreference in the drawing.",
    "lineNumber": 617,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} block section"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "block section"
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "__parseBlocks",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseBlocks",
    "access": "private",
    "description": "Contains block definition and drawing entities that make up each block \nreference in the drawing.",
    "lineNumber": 628,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} block section"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "block section"
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "__parseBeginBlock",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseBeginBlock",
    "access": "private",
    "description": "Begins each block entry (a block entity definition)",
    "lineNumber": 663,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} a block entity definition"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a block entity definition"
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "__parseEndBlock",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseEndBlock",
    "access": "private",
    "description": "End of each block entry (an endblk entity definition)",
    "lineNumber": 715,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} an endblk entity definition"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "an endblk entity definition"
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "__parseEntitiesSection",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseEntitiesSection",
    "access": "private",
    "description": "This section contains the graphical objects (entities) in the drawing,\nincluding block references (insert entities).",
    "lineNumber": 743,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} entities section"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "entities section"
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "__parseEntity",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseEntity",
    "access": "private",
    "description": "Parse drawing entity",
    "lineNumber": 762,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} entity object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "entity object"
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "__getAcadColor",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__getAcadColor",
    "access": "private",
    "description": "Returns the color value of the given AutoCad color index value",
    "lineNumber": 833,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "color index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "color value as a number"
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "__parseAppGroup",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parseAppGroup",
    "access": "private",
    "description": "Indicates the start of an extension dictionary group. This g roup exists\nonly if persistent reactors have been attached to this object (optional)",
    "lineNumber": 844,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} appGroup object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "appGroup object"
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "__parsePoint",
    "memberof": "lib/parsers/DXFParser.js~DXFParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/DXFParser.js~DXFParser#__parsePoint",
    "access": "private",
    "description": "Parses a 2D or 3D point, returning it as an object with x, y, and\n(sometimes) z property if it is 3D. It is assumed the current group\nis x of the point being read in, and scanner.next() will return the\ny. The parser will determine if there is a z point automatically.",
    "lineNumber": 870,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The 2D or 3D point as an object with x, y[, z]"
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "lib/parsers/Parser.js",
    "content": "import assert from 'assert';\r\n\r\n/**\r\n * Parse the input data\r\n * @interface\r\n * \r\n */\r\nexport default class Parser {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * @public\r\n     * @param {String} source \r\n     */\r\n    parseSync(source) {\r\n        if (typeof (source) === 'string') {\r\n            return this.parse(source);\r\n        } else {\r\n            console.error('Cannot read dxf source of type `' + typeof (source));\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the input object\r\n     * @abstract\r\n     * @public \r\n     * @param {Object} obj - object to be parsed\r\n     * @return {Object} parsed object\r\n     */\r\n    parse(obj) {\r\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/Parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "Parser",
    "memberof": "lib/parsers/Parser.js",
    "static": true,
    "longname": "lib/parsers/Parser.js~Parser",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/Parser.js",
    "importStyle": "Parser",
    "description": "Parse the input data",
    "lineNumber": 8,
    "interface": true
  },
  {
    "__docId__": 191,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/Parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/Parser.js~Parser#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "parseSync",
    "memberof": "lib/parsers/Parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/Parser.js~Parser#parseSync",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/Parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/Parser.js~Parser#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    },
    "abstract": true
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "lib/parsers/dxf/AutoCadColorIndex.js",
    "content": "/**\n * AutoCad files sometimes use an indexed color value between 1 and 255 inclusive.\n * Each value corresponds to a color. index 1 is red, that is 16711680 or 0xFF0000.\n * index 0 and 256, while included in this array, are actually reserved for inheritance\n * values in AutoCad so they should not be used for index color lookups.\n */\n\nexport default [\n    0,\n    16711680,\n    16776960,\n    65280,\n    65535,\n    255,\n    16711935,\n    16777215,\n    8421504,\n    12632256,\n    16711680,\n    16744319,\n    13369344,\n    13395558,\n    10027008,\n    10046540,\n    8323072,\n    8339263,\n    4980736,\n    4990502,\n    16727808,\n    16752511,\n    13382400,\n    13401958,\n    10036736,\n    10051404,\n    8331008,\n    8343359,\n    4985600,\n    4992806,\n    16744192,\n    16760703,\n    13395456,\n    13408614,\n    10046464,\n    10056268,\n    8339200,\n    8347455,\n    4990464,\n    4995366,\n    16760576,\n    16768895,\n    13408512,\n    13415014,\n    10056192,\n    10061132,\n    8347392,\n    8351551,\n    4995328,\n    4997670,\n    16776960,\n    16777087,\n    13421568,\n    13421670,\n    10000384,\n    10000460,\n    8355584,\n    8355647,\n    5000192,\n    5000230,\n    12582656,\n    14679935,\n    10079232,\n    11717734,\n    7510016,\n    8755276,\n    6258432,\n    7307071,\n    3755008,\n    4344870,\n    8388352,\n    12582783,\n    6736896,\n    10079334,\n    5019648,\n    7510092,\n    4161280,\n    6258495,\n    2509824,\n    3755046,\n    4194048,\n    10485631,\n    3394560,\n    8375398,\n    2529280,\n    6264908,\n    2064128,\n    5209919,\n    1264640,\n    3099686,\n    65280,\n    8388479,\n    52224,\n    6736998,\n    38912,\n    5019724,\n    32512,\n    4161343,\n    19456,\n    2509862,\n    65343,\n    8388511,\n    52275,\n    6737023,\n    38950,\n    5019743,\n    32543,\n    4161359,\n    19475,\n    2509871,\n    65407,\n    8388543,\n    52326,\n    6737049,\n    38988,\n    5019762,\n    32575,\n    4161375,\n    19494,\n    2509881,\n    65471,\n    8388575,\n    52377,\n    6737074,\n    39026,\n    5019781,\n    32607,\n    4161391,\n    19513,\n    2509890,\n    65535,\n    8388607,\n    52428,\n    6737100,\n    39064,\n    5019800,\n    32639,\n    4161407,\n    19532,\n    2509900,\n    49151,\n    8380415,\n    39372,\n    6730444,\n    29336,\n    5014936,\n    24447,\n    4157311,\n    14668,\n    2507340,\n    32767,\n    8372223,\n    26316,\n    6724044,\n    19608,\n    5010072,\n    16255,\n    4153215,\n    9804,\n    2505036,\n    16383,\n    8364031,\n    13260,\n    6717388,\n    9880,\n    5005208,\n    8063,\n    4149119,\n    4940,\n    2502476,\n    255,\n    8355839,\n    204,\n    6710988,\n    152,\n    5000344,\n    127,\n    4145023,\n    76,\n    2500172,\n    4129023,\n    10452991,\n    3342540,\n    8349388,\n    2490520,\n    6245528,\n    2031743,\n    5193599,\n    1245260,\n    3089996,\n    8323327,\n    12550143,\n    6684876,\n    10053324,\n    4980888,\n    7490712,\n    4128895,\n    6242175,\n    2490444,\n    3745356,\n    12517631,\n    14647295,\n    10027212,\n    11691724,\n    7471256,\n    8735896,\n    6226047,\n    7290751,\n    3735628,\n    4335180,\n    16711935,\n    16744447,\n    13369548,\n    13395660,\n    9961624,\n    9981080,\n    8323199,\n    8339327,\n    4980812,\n    4990540,\n    16711871,\n    16744415,\n    13369497,\n    13395634,\n    9961586,\n    9981061,\n    8323167,\n    8339311,\n    4980793,\n    4990530,\n    16711807,\n    16744383,\n    13369446,\n    13395609,\n    9961548,\n    9981042,\n    8323135,\n    8339295,\n    4980774,\n    4990521,\n    16711743,\n    16744351,\n    13369395,\n    13395583,\n    9961510,\n    9981023,\n    8323103,\n    8339279,\n    4980755,\n    4990511,\n    3355443,\n    5987163,\n    8684676,\n    11382189,\n    14079702,\n    16777215\n];",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/AutoCadColorIndex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Arc.js",
    "content": "import EntityParser from \"./EntityParser\";\r\nimport DXFScanner from \"../../../scanners/DXFScanner\";\r\n\r\n/**\r\n * @public\r\n * @extends {EntityParser}\r\n */\r\nclass Arc extends EntityParser {\r\n    constructor() {\r\n        super();\r\n        if (!Arc.instance) {\r\n            Arc.instance = this;\r\n        }\r\n        return Arc.instance;\r\n    }\r\n\r\n    /**\r\n     * Parse the input object\r\n     * @public \r\n     * @param {DXFScanner} scanner - object to be parsed\r\n     * @return {Object} parsed object\r\n     */\r\n    parse(scanner) {\r\n        let entity = super.parse(scanner);\r\n        while (!scanner.isEOF()) {\r\n            let group = scanner.next().peek();\r\n            if (group.code === 0) { scanner.rewind(); break; }\r\n            switch (group.code) {\r\n                case 10: // X coordinate of point\r\n                    entity.center = this.__parsePoint(scanner);\r\n                    break;\r\n                case 40: // radius\r\n                    entity.radius = group.value;\r\n                    break;\r\n                case 50: // start angle\r\n                    entity.startAngle = Math.PI / 180 * group.value;\r\n                    break;\r\n                case 51: // end angle\r\n                    entity.endAngle = Math.PI / 180 * group.value;\r\n                    entity.angleLength = entity.endAngle - entity.startAngle; // angleLength is deprecated\r\n                    break;\r\n                default: // ignored attribute\r\n                    console.log('Unhandel group %j', group);\r\n                    break;\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n}\r\n\r\nconst instance = new Arc();\r\n\r\n// prevents new properties from being added to the object\r\nObject.freeze(instance);\r\n\r\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Arc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "class",
    "name": "Arc",
    "memberof": "lib/parsers/dxf/entities/Arc.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Arc.js~Arc",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Arc.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 197,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Arc.js~Arc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Arc.js~Arc#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Arc.js~Arc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Arc.js~Arc#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Arc.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Arc.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Arc.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Arc.js~Arc"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/AttDef.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass AttDef extends EntityParser {\n    constructor() {\n        super();\n        if (!AttDef.instance) {\n            AttDef.instance = this;\n        }\n        return AttDef.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        entity.scale = 1;\n        entity.textStyle = 'STANDARD';\n\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 1:\n                    entity.text = group.value;\n                    break;\n                case 2:\n                    entity.tag = group.value;\n                    break;\n                case 3:\n                    entity.prompt = group.value;\n                    break;\n                case 7:\n                    entity.textStyle = group.value;\n                    break;\n                case 10: // X coordinate of 'first alignment point'\n                    entity.startPoint = this.__parsePoint(scanner);\n                    break;\n                case 11: // X coordinate of 'second alignment point'\n                    entity.endPoint = this.__parsePoint(scanner);\n                    break;\n                case 39:\n                    entity.thickness = group.value;\n                    break;\n                case 40:\n                    entity.textHeight = group.value;\n                    break;\n                case 41:\n                    entity.scale = group.value;\n                    break;\n                case 50:\n                    entity.rotation = group.value;\n                    break;\n                case 51:\n                    entity.obliqueAngle = group.value;\n                    break;\n                case 70:\n                    entity.invisible = !!(group.value & 0x01);\n                    entity.constant = !!(group.value & 0x02);\n                    entity.verificationRequired = !!(group.value & 0x04);\n                    entity.preset = !!(group.value & 0x08);\n                    break;\n                case 71:\n                    entity.backwards = !!(group.value & 0x02);\n                    entity.mirrored = !!(group.value & 0x04);\n                    break;\n                case 72:\n                    // TODO: enum values?\n                    entity.horizontalJustification = group.value;\n                    break;\n                case 73:\n                    entity.fieldLength = group.value;\n                    break;\n                case 74:\n                    // TODO: enum values?\n                    entity.verticalJustification = group.value;\n                    break;\n                case 100:\n                    break;\n                case 210:\n                    entity.extrusionDirectionX = group.value;\n                    break;\n                case 220:\n                    entity.extrusionDirectionY = group.value;\n                    break;\n                case 230:\n                    entity.extrusionDirectionZ = group.value;\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new AttDef();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/AttDef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "AttDef",
    "memberof": "lib/parsers/dxf/entities/AttDef.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/AttDef.js~AttDef",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/AttDef.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/AttDef.js~AttDef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/AttDef.js~AttDef#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/AttDef.js~AttDef",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/AttDef.js~AttDef#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/AttDef.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/AttDef.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/AttDef.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/AttDef.js~AttDef"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Circle.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Circle extends EntityParser {\n    constructor() {\n        super();\n        if (!Circle.instance) {\n            Circle.instance = this;\n        }\n        return Circle.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 10: // X coordinate of point\n                    entity.center = this.__parsePoint(scanner);\n                    break;\n                case 40: // radius\n                    entity.radius = group.value;\n                    break;\n                case 50: // start angle\n                    entity.startAngle = Math.PI / 180 * group.value;\n                    break;\n                case 51: // end angle\n                    endAngle = Math.PI / 180 * group.value;\n                    if (endAngle < entity.startAngle)\n                        entity.angleLength = endAngle + 2 * Math.PI - entity.startAngle;\n                    else\n                        entity.angleLength = endAngle - entity.startAngle;\n                    entity.endAngle = endAngle;\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Circle();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Circle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "Circle",
    "memberof": "lib/parsers/dxf/entities/Circle.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Circle.js~Circle",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Circle.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Circle.js~Circle#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Circle.js~Circle#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Circle.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Circle.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Circle.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Circle.js~Circle"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Dimension.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Dimension extends EntityParser {\n    constructor() {\n        super();\n        if (!Dimension.instance) {\n            Dimension.instance = this;\n        }\n        return Dimension.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 2: // Referenced block name\n                    entity.block = group.value;\n                    break;\n                case 10: // X coordinate of 'first alignment point'\n                    entity.anchorPoint = this.__parsePoint(scanner);\n                    break;\n                case 11:\n                    entity.middleOfText = this.__parsePoint(scanner);\n                    break;\n                case 71: // 5 = Middle center\n                    entity.attachmentPoint = group.value;\n                    break;\n                case 42: // Actual measurement\n                    entity.actualMeasurement = group.value;\n                    break;\n                case 1: // Text entered by user explicitly\n                    entity.text = group.value;\n                    break;\n                case 50: // Angle of rotated, horizontal, or vertical dimensions\n                    entity.angle = group.value;\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Dimension();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Dimension.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "class",
    "name": "Dimension",
    "memberof": "lib/parsers/dxf/entities/Dimension.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Dimension.js~Dimension",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Dimension.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 212,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Dimension.js~Dimension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Dimension.js~Dimension#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Dimension.js~Dimension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Dimension.js~Dimension#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Dimension.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Dimension.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Dimension.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Dimension.js~Dimension"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Ellipse.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Ellipse extends EntityParser {\n    constructor() {\n        super();\n        if (!Ellipse.instance) {\n            Ellipse.instance = this;\n        }\n        return Ellipse.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 10:\n                    entity.center = this.__parsePoint(scanner);\n                    break;\n                case 11:\n                    entity.majorAxisEndPoint = this.__parsePoint(scanner);\n                    break;\n                case 40:\n                    entity.axisRatio = group.value;\n                    break;\n                case 41:\n                    entity.startAngle = group.value;\n                    break;\n                case 42:\n                    entity.endAngle = group.value;\n                    break;\n                case 2:\n                    entity.name = group.value;\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Ellipse();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Ellipse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "Ellipse",
    "memberof": "lib/parsers/dxf/entities/Ellipse.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Ellipse.js~Ellipse",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Ellipse.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Ellipse.js~Ellipse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Ellipse.js~Ellipse#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Ellipse.js~Ellipse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Ellipse.js~Ellipse#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Ellipse.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Ellipse.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Ellipse.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Ellipse.js~Ellipse"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/EntityParser.js",
    "content": "import DXFScanner from \"../../../scanners/DXFScanner\";\r\nimport AUTO_CAD_COLOR_INDEX from '../AutoCadColorIndex';\r\n\r\n/**\r\n * @interface\r\n * @public\r\n */\r\nexport default class EntityParser {\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * Attempts to parse codes common to all entities.\r\n     * @public \r\n     * @param {DXFScanner} scanner - object to be parsed\r\n     * @return {Object} parsed object\r\n     */\r\n    parse(scanner) {\r\n        let entity = {};\r\n        //Default\r\n        entity.type = '';\r\n        entity.lineType = \"BYLAYER\";\r\n        entity.colorIndex = \"BYLAYER\";\r\n        entity.lineTypeScale = 1.0;\r\n        entity.visible = true;\r\n        entity.inPaperSpace = false;\r\n        while (!scanner.isEOF()) {\r\n            let group = scanner.next().peek();\r\n            if (group.code === 100) {\r\n                if (group.value === 'AcDbEntity')\r\n                    continue;\r\n                break;\r\n            }\r\n            switch (group.code) {\r\n                case 0:\r\n                    entity.type = group.value;\r\n                    break;\r\n                case 5:\r\n                    entity.handle = group.value;\r\n                    break;\r\n                case 6:\r\n                    entity.lineType = group.value;\r\n                    break;\r\n                case 8:\r\n                    entity.layer = group.value;\r\n                    break;\r\n                case 48:\r\n                    entity.lineTypeScale = group.value;\r\n                    break;\r\n                case 60:\r\n                    entity.visible = group.value === 0;\r\n                    break;\r\n                case 62: // Acad Index Color. 0 inherits ByBlock. 256 inherits ByLayer. Default is bylayer\r\n                    if (group.value === 0.0) {\r\n                        entity.colorIndex = 'BYBLOCK';\r\n                    } else if (group.value === 256) {\r\n                        entity.colorIndex = 'BYLAYER';\r\n                    } else {\r\n                        entity.colorIndex = group.value;\r\n                        let color = this.__getAcadColor(Math.abs(group.value));\r\n                        if (color)\r\n                            entity.color = color;\r\n                    }\r\n                    break;\r\n                case 67:\r\n                    entity.inPaperSpace = group.value !== 0;\r\n                    break;\r\n                case 102:\r\n                    entity[group.value.slice(1)] = this.__parseAppGroup(scanner);\r\n                    break;\r\n                case 360:\r\n                    entity.softOwnerHandel = group.value;\r\n                    break;\r\n                case 330:\r\n                    entity.hardOwnerHandel = group.value;\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /**\r\n     * Indicates the start of an extension dictionary group. This g roup exists\r\n     * only if persistent reactors have been attached to this object (optional)\r\n     * @private\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @returns {Object} appGroup object\r\n     */\r\n    __parseAppGroup(scanner) {\r\n        let appGroup = {};\r\n        while (!scanner.isEndOfAppGroup()) {\r\n            let group = scanner.next().peek();\r\n            switch (group.code) {\r\n                case 360:\r\n                    appGroup.softOwnerHandel = group.value;\r\n                    break;\r\n                case 330:\r\n                    appGroup.hardOwnerHandel = group.value;\r\n                    break;\r\n                default:\r\n                    console.log('Unhandel group %j', group);\r\n            }\r\n        }\r\n        return appGroup;\r\n    }\r\n\r\n    /**\r\n     * Returns the color value of the given AutoCad color index value\r\n     * @private\r\n     * @param {Number} index - color index\r\n     * @return {Number} color value as a number\r\n     */\r\n    __getAcadColor(index) {\r\n        return AUTO_CAD_COLOR_INDEX[index];\r\n    }\r\n\r\n    /**\r\n     * Parses a 2D or 3D point, returning it as an object with x, y, and\r\n     * (sometimes) z property if it is 3D. It is assumed the current group\r\n     * is x of the point being read in, and scanner.next() will return the\r\n     * y. The parser will determine if there is a z point automatically.\r\n     * @param {DXFScanner} scanner - scanner object\r\n     * @return {Object} The 2D or 3D point as an object with x, y[, z]\r\n     */\r\n    __parsePoint(scanner) {\r\n        let point = {},\r\n            group = scanner.peek(),\r\n            code = group.code; // group code for X-Coordinate\r\n\r\n        point.x = group.value;\r\n        code += 10; // group code for Y-Coordinate is at 10 code offset from X-Coordinate\r\n        group = scanner.next().peek();\r\n        if (group.code != code) {\r\n            scanner.rewind();\r\n            return point;\r\n        }\r\n\r\n        point.y = group.value;\r\n        code += 10; // group code for Z-Coordinate is at 10 code offset from Y-Coordinate\r\n        group = scanner.next().peek();\r\n        if (group.code != code) {\r\n            scanner.rewind();\r\n            return point;\r\n        }\r\n\r\n        point.z = group.value;\r\n\r\n        return point;\r\n    };\r\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/EntityParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "class",
    "name": "EntityParser",
    "memberof": "lib/parsers/dxf/entities/EntityParser.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/EntityParser.js~EntityParser",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/EntityParser.js",
    "importStyle": "EntityParser",
    "description": "",
    "lineNumber": 8,
    "interface": true
  },
  {
    "__docId__": 222,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/EntityParser.js~EntityParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/EntityParser.js~EntityParser#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/EntityParser.js~EntityParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/EntityParser.js~EntityParser#parse",
    "access": "public",
    "description": "Attempts to parse codes common to all entities.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "__parseAppGroup",
    "memberof": "lib/parsers/dxf/entities/EntityParser.js~EntityParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/EntityParser.js~EntityParser#__parseAppGroup",
    "access": "private",
    "description": "Indicates the start of an extension dictionary group. This g roup exists\nonly if persistent reactors have been attached to this object (optional)",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} appGroup object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "appGroup object"
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "__getAcadColor",
    "memberof": "lib/parsers/dxf/entities/EntityParser.js~EntityParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/EntityParser.js~EntityParser#__getAcadColor",
    "access": "private",
    "description": "Returns the color value of the given AutoCad color index value",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "color index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "color value as a number"
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "__parsePoint",
    "memberof": "lib/parsers/dxf/entities/EntityParser.js~EntityParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/EntityParser.js~EntityParser#__parsePoint",
    "access": "private",
    "description": "Parses a 2D or 3D point, returning it as an object with x, y, and\n(sometimes) z property if it is 3D. It is assumed the current group\nis x of the point being read in, and scanner.next() will return the\ny. The parser will determine if there is a z point automatically.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "scanner object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The 2D or 3D point as an object with x, y[, z]"
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Insert.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Insert extends EntityParser {\n    constructor() {\n        super();\n        if (!Insert.instance) {\n            Insert.instance = this;\n        }\n        return Insert.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 2:\n                    entity.name = group.value;\n                    break;\n                case 41:\n                    entity.xScale = group.value;\n                    break;\n                case 42:\n                    entity.yScale = group.value;\n                    break;\n                case 43:\n                    entity.zScale = group.value;\n                    break;\n                case 10:\n                    entity.position = this.__parsePoint(scanner);\n                    break;\n                case 50:\n                    entity.rotation = group.value;\n                    break;\n                case 70:\n                    entity.columnCount = group.value;\n                    break;\n                case 71:\n                    entity.rowCount = group.value;\n                    break;\n                case 44:\n                    entity.columnSpacing = group.value;\n                    break;\n                case 45:\n                    entity.rowSpacing = group.value;\n                    break;\n                case 210:\n                    entity.extrusionDirection = this.__parsePoint(scanner);\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Insert();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Insert.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "class",
    "name": "Insert",
    "memberof": "lib/parsers/dxf/entities/Insert.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Insert.js~Insert",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Insert.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 229,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Insert.js~Insert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Insert.js~Insert#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Insert.js~Insert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Insert.js~Insert#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Insert.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Insert.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Insert.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Insert.js~Insert"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/LWPolyline.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass LWPolyline extends EntityParser {\n    constructor() {\n        super();\n        if (!LWPolyline.instance) {\n            LWPolyline.instance = this;\n        }\n        return LWPolyline.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public\n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        entity.vertices = [];\n        entity.numberOfVertices = 0;\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 38:\n                    entity.elevation = group.value;\n                    break;\n                case 39:\n                    entity.depth = group.value;\n                    break;\n                case 70: // 1 = Closed shape, 128 = plinegen?, 0 = default\n                    entity.shape = (group.value & 1) === 1;\n                    entity.hasContinuousLinetypePattern = (group.value & 128) === 128;\n                    break;\n                case 90:\n                    entity.numberOfVertices = group.value;\n                    break;\n                case 10: // X coordinate of point\n                    scanner.rewind();\n                    entity.vertices = this.__parseLWPolylineVertices(scanner, entity.numberOfVertices);\n                    break;\n                case 43:\n                    if (group.value !== 0) entity.width = group.value;\n                    break;\n                case 210:\n                    entity.extrusionDirectionX = group.value;\n                    break;\n                case 220:\n                    entity.extrusionDirectionY = group.value;\n                    break;\n                case 230:\n                    entity.extrusionDirectionZ = group.value;\n                    break;\n                default:\n                    // ignored attribute\n                    console.log(\"Unhandel group %j\", group);\n                    break;\n            }\n        }\n        return entity;\n    }\n\n    __parseLWPolylineVertices(scanner, n) {\n        if (!n || n <= 0) {\n            throw Error(\"n must be greater than 0 verticies\");\n        }\n        let vertices = [];\n        let vertexIsStarted = false;\n        let vertexIsFinished = false;\n\n        for (let i = 0; i < n; i++) {\n            let vertex = {};\n            while (!scanner.isEOF()) {\n                if (vertexIsFinished) {\n                    scanner.rewind();\n                    break;\n                }\n                let group = scanner.next().peek();\n                if (group.code === 0) {\n                    scanner.rewind();\n                    break;\n                }\n\n                switch (group.code) {\n                    case 10: // X\n                        if (vertexIsStarted) {\n                            scanner.rewind();\n                            vertexIsFinished = true;\n                            continue;\n                        }\n                        vertex.x = group.value;\n                        vertexIsStarted = true;\n                        break;\n                    case 20: // Y\n                        vertex.y = group.value;\n                        break;\n                    case 30: // Z\n                        vertex.z = group.value;\n                        break;\n                    case 40: // start width\n                        vertex.startWidth = group.value;\n                        break;\n                    case 41: // end width\n                        vertex.endWidth = group.value;\n                        break;\n                    case 42: // bulge\n                        if (group.value != 0) vertex.bulge = group.value;\n                        break;\n                    default:\n                        scanner.rewind();\n                        // if we do not hit known code return vertices.  Code might belong to entity\n                        if (vertexIsStarted) {\n                            vertices.push(vertex);\n                        }\n                        return vertices;\n                }\n            }\n            // See https://groups.google.com/forum/#!topic/comp.cad.autocad/9gn8s5O_w6E\n            vertices.push(vertex);\n            vertexIsStarted = false;\n            vertexIsFinished = false;\n        }\n        return vertices;\n    }\n}\n\nconst instance = new LWPolyline();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/LWPolyline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "LWPolyline",
    "memberof": "lib/parsers/dxf/entities/LWPolyline.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/LWPolyline.js~LWPolyline",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/LWPolyline.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 234,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/LWPolyline.js~LWPolyline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/LWPolyline.js~LWPolyline#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/LWPolyline.js~LWPolyline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/LWPolyline.js~LWPolyline#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "__parseLWPolylineVertices",
    "memberof": "lib/parsers/dxf/entities/LWPolyline.js~LWPolyline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/LWPolyline.js~LWPolyline#__parseLWPolylineVertices",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "scanner",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/LWPolyline.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/LWPolyline.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/LWPolyline.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/LWPolyline.js~LWPolyline"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Line.js",
    "content": "import EntityParser from \"./EntityParser\";\r\nimport DXFScanner from \"../../../scanners/DXFScanner\";\r\n\r\n/**\r\n * @public\r\n * @extends {EntityParser}\r\n */\r\nclass Line extends EntityParser {\r\n    constructor() {\r\n        super();\r\n        if (!Line.instance) {\r\n            Line.instance = this;\r\n        }\r\n        return Line.instance;\r\n    }\r\n\r\n    /**\r\n     * Parse the input object\r\n     * @public \r\n     * @param {DXFScanner} scanner - object to be parsed\r\n     * @return {Object} parsed object\r\n     */\r\n    parse(scanner) {\r\n        let entity = super.parse(scanner);\r\n        entity.vertices = [];\r\n        while (!scanner.isEOF()) {\r\n            let group = scanner.next().peek();\r\n            if (group.code === 0) { scanner.rewind(); break; }\r\n            switch (group.code) {\r\n                case 10: // X coordinate of point\r\n                    entity.vertices.unshift(this.__parsePoint(scanner));\r\n                    break;\r\n                case 11:\r\n                    entity.vertices.push(this.__parsePoint(scanner));\r\n                    break;\r\n                case 210:\r\n                    entity.extrusionDirection = this.__parsePoint(scanner);\r\n                    break;\r\n                default: // ignored attribute\r\n                    console.log('Unhandel group %j', group);\r\n                    break;\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n}\r\n\r\nconst instance = new Line();\r\n\r\n// prevents new properties from being added to the object\r\nObject.freeze(instance);\r\n\r\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Line.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "Line",
    "memberof": "lib/parsers/dxf/entities/Line.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Line.js~Line",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Line.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 240,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Line.js~Line",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Line.js~Line#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Line.js~Line",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Line.js~Line#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Line.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Line.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Line.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Line.js~Line"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Mtext.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Mtext extends EntityParser {\n    constructor() {\n        super();\n        if (!Mtext.instance) {\n            Mtext.instance = this;\n        }\n        return Mtext.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 1:\n                    entity.text = group.value;\n                    break;\n                case 3:\n                    entity.text += group.value;\n                    break;\n                case 10:\n                    entity.position = this.__parsePoint(scanner);\n                    break;\n                case 40:\n                    //Note: this is the text height\n                    entity.height = group.value;\n                    break;\n                case 41:\n                    entity.width = group.value;\n                    break;\n                case 50:\n                    entity.rotation = group.value;\n                    break;\n                case 71:\n                    entity.attachmentPoint = group.value;\n                    break;\n                case 72:\n                    entity.drawingDirection = group.value;\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Mtext();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Mtext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "class",
    "name": "Mtext",
    "memberof": "lib/parsers/dxf/entities/Mtext.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Mtext.js~Mtext",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Mtext.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 245,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Mtext.js~Mtext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Mtext.js~Mtext#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Mtext.js~Mtext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Mtext.js~Mtext#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 247,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Mtext.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Mtext.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Mtext.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Mtext.js~Mtext"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Point.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Point extends EntityParser {\n    constructor() {\n        super();\n        if (!Point.instance) {\n            Point.instance = this;\n        }\n        return Point.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 10:\n                    entity.position = this.__parsePoint(scanner);\n                    break;\n                case 39:\n                    entity.thickness = group.value;\n                    break;\n                case 210:\n                    entity.extrusionDirection = this.__parsePoint(scanner);\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Point();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Point.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "Point",
    "memberof": "lib/parsers/dxf/entities/Point.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Point.js~Point",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Point.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Point.js~Point",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Point.js~Point#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Point.js~Point",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Point.js~Point#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Point.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Point.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Point.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Point.js~Point"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Solid.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Solid extends EntityParser {\n    constructor() {\n        super();\n        if (!Solid.instance) {\n            Solid.instance = this;\n        }\n        return Solid.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        entity.points = [];\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 10:\n                    entity.points[0] = this.__parsePoint(scanner);\n                    break;\n                case 11:\n                    entity.points[1] = this.__parsePoint(scanner);\n                    break;\n                case 12:\n                    entity.points[2] = this.__parsePoint(scanner);\n                    break;\n                case 13:\n                    entity.points[3] = this.__parsePoint(scanner);\n                    break;\n                case 210:\n                    entity.extrusionDirection = this.__parsePoint(scanner);\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Solid();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Solid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "Solid",
    "memberof": "lib/parsers/dxf/entities/Solid.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Solid.js~Solid",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Solid.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 255,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Solid.js~Solid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Solid.js~Solid#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Solid.js~Solid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Solid.js~Solid#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Solid.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Solid.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Solid.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Solid.js~Solid"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Spline.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Spline extends EntityParser {\n    constructor() {\n        super();\n        if (!Spline.instance) {\n            Spline.instance = this;\n        }\n        return Spline.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 10:\n                    if (!entity.controlPoints) entity.controlPoints = [];\n                    entity.controlPoints.push(this.__parsePoint(scanner));\n                    break;\n                case 11:\n                    if (!entity.fitPoints) entity.fitPoints = [];\n                    entity.fitPoints.push(this.__parsePoint(scanner));\n                    break;\n                case 12:\n                    entity.startTangent = this.__parsePoint(scanner);\n                    break;\n                case 13:\n                    entity.endTangent = this.__parsePoint(scanner);\n                    break;\n                case 40:\n                    if (!entity.knotValues) entity.knotValues = [];\n                    entity.knotValues.push(group.value);\n                    break;\n                case 70:\n                    if ((group.value & 1) != 0) entity.closed = true;\n                    if ((group.value & 2) != 0) entity.periodic = true;\n                    if ((group.value & 4) != 0) entity.rational = true;\n                    if ((group.value & 8) != 0) entity.planar = true;\n                    if ((group.value & 16) != 0) {\n                        entity.planar = true;\n                        entity.linear = true;\n                    }\n                    break;\n\n                case 71:\n                    entity.degreeOfSplineCurve = group.value;\n                    break;\n                case 72:\n                    entity.numberOfKnots = group.value;\n                    break;\n                case 73:\n                    entity.numberOfControlPoints = group.value;\n                    break;\n                case 74:\n                    entity.numberOfFitPoints = group.value;\n                    break;\n                case 210:\n                    entity.normalVector = this.__parsePoint(scanner);\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Spline();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Spline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "class",
    "name": "Spline",
    "memberof": "lib/parsers/dxf/entities/Spline.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Spline.js~Spline",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Spline.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 260,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Spline.js~Spline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Spline.js~Spline#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Spline.js~Spline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Spline.js~Spline#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Spline.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Spline.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Spline.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Spline.js~Spline"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Text.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Text extends EntityParser {\n    constructor() {\n        super();\n        if (!Text.instance) {\n            Text.instance = this;\n        }\n        return Text.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 10: // X coordinate of 'first alignment point'\n                    entity.startPoint = this.__parsePoint(scanner);\n                    break;\n                case 11: // X coordinate of 'second alignment point'\n                    entity.endPoint = this.__parsePoint(scanner);\n                    break;\n                case 40: // Text height\n                    entity.textHeight = group.value;\n                    break;\n                case 41:\n                    entity.xScale = group.value;\n                    break;\n                case 50: // Rotation in degrees\n                    entity.rotation = group.value;\n                    break;\n                case 1: // Text\n                    entity.text = group.value;\n                    break;\n                // NOTE: 72 and 73 are meaningless without 11 (second alignment point)\n                case 72: // Horizontal alignment\n                    entity.halign = group.value;\n                    break;\n                case 73: // Vertical alignment\n                    entity.valign = group.value;\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Text();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "class",
    "name": "Text",
    "memberof": "lib/parsers/dxf/entities/Text.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Text.js~Text",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Text.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 265,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Text.js~Text#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Text.js~Text#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Text.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Text.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Text.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Text.js~Text"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "file",
    "name": "lib/parsers/dxf/entities/Vertex.js",
    "content": "import EntityParser from \"./EntityParser\";\nimport DXFScanner from \"../../../scanners/DXFScanner\";\n\n/**\n * @public\n * @extends {EntityParser}\n */\nclass Vertex extends EntityParser {\n    constructor() {\n        super();\n        if (!Vertex.instance) {\n            Vertex.instance = this;\n        }\n        return Vertex.instance;\n    }\n\n    /**\n     * Parse the input object\n     * @public \n     * @param {DXFScanner} scanner - object to be parsed\n     * @return {Object} parsed object\n     */\n    parse(scanner) {\n        let entity = super.parse(scanner);\n        while (!scanner.isEOF()) {\n            let group = scanner.next().peek();\n            if (group.code === 0) { scanner.rewind(); break; }\n            switch (group.code) {\n                case 10: // X\n                    entity.x = group.value;\n                    break;\n                case 20: // Y\n                    entity.y = group.value;\n                    break;\n                case 30: // Z\n                    entity.z = group.value;\n                    break;\n                case 40: // start width\n                case 41: // end width\n                case 42: // bulge\n                    if (group.value != 0) entity.bulge = group.value;\n                    break;\n                case 70: // flags\n                    entity.curveFittingVertex = (group.value & 1) !== 0;\n                    entity.curveFitTangent = (group.value & 2) !== 0;\n                    entity.splineVertex = (group.value & 8) !== 0;\n                    entity.splineControlPoint = (group.value & 16) !== 0;\n                    entity.threeDPolylineVertex = (group.value & 32) !== 0;\n                    entity.threeDPolylineMesh = (group.value & 64) !== 0;\n                    entity.polyfaceMeshVertex = (group.value & 128) !== 0;\n                    break;\n                case 50: // curve fit tangent direction\n                case 71: // polyface mesh vertex index\n                case 72: // polyface mesh vertex index\n                case 73: // polyface mesh vertex index\n                case 74: // polyface mesh vertex index\n                    break;\n                default: // ignored attribute\n                    console.log('Unhandel group %j', group);\n                    break;\n            }\n        }\n        return entity;\n    }\n}\n\nconst instance = new Vertex();\n\n// prevents new properties from being added to the object\nObject.freeze(instance);\n\nexport default instance;",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/parsers/dxf/entities/Vertex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "class",
    "name": "Vertex",
    "memberof": "lib/parsers/dxf/entities/Vertex.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Vertex.js~Vertex",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Vertex.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 8,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "EntityParser"
    ]
  },
  {
    "__docId__": 270,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parsers/dxf/entities/Vertex.js~Vertex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Vertex.js~Vertex#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "parse",
    "memberof": "lib/parsers/dxf/entities/Vertex.js~Vertex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parsers/dxf/entities/Vertex.js~Vertex#parse",
    "access": "public",
    "description": "Parse the input object",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "DXFScanner"
        ],
        "spread": false,
        "optional": false,
        "name": "scanner",
        "description": "object to be parsed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed object"
    }
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "name": "instance",
    "memberof": "lib/parsers/dxf/entities/Vertex.js",
    "static": true,
    "longname": "lib/parsers/dxf/entities/Vertex.js~instance",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/parsers/dxf/entities/Vertex.js",
    "importStyle": "instance",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "lib/parsers/dxf/entities/Vertex.js~Vertex"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "lib/scanners/DXFScanner.js",
    "content": "import Scanner from './Scanner'\r\n/**\r\n * Using AutoCad 2012 DXF Reference(See pages 3 - 10)\r\n * http://images.autodesk.com/adsk/files/autocad_2012_pdf_dxf-reference_enu.pdf\r\n * \r\n * @public\r\n * @extends {Scanner}\r\n * @example \r\n * let dxfScanner = new DXFScanner()\r\n */\r\nexport default class DXFScanner extends Scanner {\r\n    /**\r\n     * \r\n     * @param {Array} dxfData - DXF Data in Array object \r\n     */\r\n    constructor(dxfData) {\r\n        super(dxfData || []);\r\n    }\r\n\r\n    /**\r\n     * Increment the file pointer\r\n     * @public\r\n     * @override\r\n     * @return {this} refrence to Scanner object\r\n     * @throws {Error} throw error when no data to read\r\n     */\r\n    next() {\r\n        if (!this.hasNext()) {\r\n            if (!this._eof)\r\n                throw new Error('Unexpected end of input: EOF group not read before end of file. Ended on code ' + this._data[this._pointer]);\r\n            else\r\n                throw new Error('Cannot call \\'next\\' after EOF group has been read');\r\n        }\r\n\r\n        this._pointer += 2; // Why ? Group code composed of pairs of codes and associated values    \r\n        if (this.isCurrentGroup(0, 'EOF')) this._eof = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Read the current position group in the file\r\n     * @public\r\n     * @override\r\n     * @return {{code: Number}|*} the first is the group code, the second is the value\r\n     * @throws {Error} throw error when unable to read the group data from file\r\n     */\r\n    peek() {\r\n        if (!this.hasNext()) {\r\n            if (!this.isEOF())\r\n                throw new Error('Unexpected end of input: EOF group not read before end of file. Ended on code ' + this._data[this._pointer]);\r\n            else\r\n                throw new Error('Cannot call \\'next\\' after EOF group has been read');\r\n        }\r\n\r\n        var group = {\r\n            code: parseInt(this._data[this._pointer])\r\n        };\r\n\r\n        group.value = this.__parseGroupValue(group.code, this._data[this._pointer + 1].trim());\r\n\r\n        return group;\r\n    }\r\n\r\n    /**\r\n     * Set the position file pointer\r\n     * @public\r\n     * @override\r\n     * @param {Number} numberOfGroups - number of group\r\n     */\r\n    rewind(numberOfGroups) {\r\n        numberOfGroups = numberOfGroups || 1;\r\n        this._pointer = this._pointer - numberOfGroups * 2;\r\n    }\r\n\r\n    /**\r\n     * Return true if only if there is data to read\r\n     * @public\r\n     * @override\r\n     * @returns {boolean} true/false\r\n     */\r\n    hasNext() {\r\n        // Check if we have read EOF group code\r\n        if (this._eof) {\r\n            return false;\r\n        }\r\n\r\n        // We need to be sure there are two lines available\r\n        if (this._pointer > this._data.length - 2) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Return true if only if there is End of file\r\n     * @public\r\n     * @override\r\n     * @returns {boolean} true/false\r\n     */\r\n    isEOF() {\r\n        return this._eof;\r\n    }\r\n\r\n    /**\r\n     * Gives current position in the file\r\n     * @public\r\n     * @override\r\n     * @returns {Number} current position\r\n     */\r\n    ftell() {\r\n        return this._pointer;\r\n    }\r\n\r\n    /**\r\n     * Return true only if the current group of scanner is specified one\r\n     * @public\r\n     * @param {Number} code - group code \r\n     * @param {*} value - goup value\r\n     * @param { function(currentGroup: Object, supplyGroup: Object): boolean } comp - describe your comparatoe\r\n     * @returns {boolean} true/false\r\n     */\r\n    isCurrentGroup(code, value, comp = null) {\r\n        let curGroup = this.peek();\r\n        if (!comp)\r\n            return curGroup.code === code && curGroup.value === value;\r\n        else\r\n            return comp(curGroup, {\r\n                code: code,\r\n                value: value\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Return if Section block start\r\n     * @public\r\n     * @returns {boolean} true/false\r\n     */\r\n    isStartOfSection() {\r\n        return this.isCurrentGroup(0, 'SECTION');\r\n    }\r\n\r\n    /**\r\n     * Return if Section block end\r\n     * @public\r\n     * @returns {boolean} true/false\r\n     */\r\n    isEndOfSection() {\r\n        return this.isCurrentGroup(0, 'ENDSEC');\r\n    }\r\n\r\n    /**\r\n     * Return if Table block start\r\n     * @public\r\n     * @returns {boolean} true/false\r\n     */\r\n    isStartOfTable() {\r\n        return this.isCurrentGroup(0, 'TABLE');\r\n    }\r\n\r\n    /**\r\n     * Return if Table block end\r\n     * @public\r\n     * @returns {boolean} true/false\r\n     */\r\n    isEndOfTable() {\r\n        return this.isCurrentGroup(0, 'ENDTAB');\r\n    }\r\n\r\n    /**\r\n     * Return if Table block start\r\n     * @public\r\n     * @returns {boolean} true/false\r\n     */\r\n    isStartOfBlock() {\r\n        return this.isCurrentGroup(0, 'BLOCK');\r\n    }\r\n\r\n    /**\r\n     * Return if Table block end\r\n     * @public\r\n     * @returns {boolean} true/false\r\n     */\r\n    isEndOfBlock() {\r\n        return this.isCurrentGroup(0, 'ENDBLK');\r\n    }\r\n\r\n    /**\r\n     * Return if Group start {application_name\r\n     * @example\r\n     * {ACAD_REACTORS / {ACAD_XDICTIONARY\r\n     * @public\r\n     * @returns {boolean} true/false\r\n     */\r\n    isStartOfAppGroup() {\r\n        return this.isCurrentGroup(102, '^{[A-Za-z]+_[A-Za-z]+$', (g1, g2) => g1.code === g2.code && g2.value.test(g1));\r\n    }\r\n\r\n    /**\r\n     * Return if Group end\r\n     * @public\r\n     * @returns {boolean} true/false\r\n     */\r\n    isEndOfAppGroup() {\r\n        return this.isCurrentGroup(102, '}');\r\n    }\r\n\r\n    /**\r\n     * Parse a value to its proper type.\r\n     * @private\r\n     * @param {Number} code - dxf group code\r\n     * @param {String} value - value aginst group code in string\r\n     * @returns {*} cast a value to its proper type\r\n     * @throws {TypeError} throw error when str incompatible with the type expected \r\n     */\r\n    __parseGroupValue(code, value) {\r\n        if (code <= 9) return value;\r\n        if (code >= 10 && code <= 59) return parseFloat(value);\r\n        if (code >= 60 && code <= 99) return parseInt(value);\r\n        if (code >= 100 && code <= 109) return value;\r\n        if (code >= 110 && code <= 149) return parseFloat(value);\r\n        if (code >= 160 && code <= 179) return parseInt(value);\r\n        if (code >= 210 && code <= 239) return parseFloat(value);\r\n        if (code >= 270 && code <= 289) return parseInt(value);\r\n        if (code >= 290 && code <= 299) return this.parseBool(value);\r\n        if (code >= 300 && code <= 369) return value;\r\n        if (code >= 370 && code <= 389) return parseInt(value);\r\n        if (code >= 390 && code <= 399) return value;\r\n        if (code >= 400 && code <= 409) return parseInt(value);\r\n        if (code >= 410 && code <= 419) return value;\r\n        if (code >= 420 && code <= 429) return parseInt(value);\r\n        if (code >= 430 && code <= 439) return value;\r\n        if (code >= 440 && code <= 459) return parseInt(value);\r\n        if (code >= 460 && code <= 469) return parseFloat(value);\r\n        if (code >= 470 && code <= 481) return value;\r\n        if (code === 999) return value;\r\n        if (code >= 1000 && code <= 1009) return value;\r\n        if (code >= 1010 && code <= 1059) return parseFloat(value);\r\n        if (code >= 1060 && code <= 1071) return parseInt(value);\r\n\r\n        console.warn('WARNING: Group code does not have a defined type: %j', {\r\n            code: code,\r\n            value: value\r\n        });\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Parse a boolean according to a 1 or 0 value\r\n     * @private\r\n     * @param {String} str - 0 or 1\r\n     * @returns {boolean} - true if str 1 , false if 0 else throw type error\r\n     * @throws {TypeError} throw error when str is not 0 or 1\r\n     */\r\n    parseBool(str) {\r\n        if (str === '0') return false;\r\n        if (str === '1') return true;\r\n        throw TypeError('String \\'' + str + '\\' cannot be cast to Boolean type');\r\n    }\r\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/scanners/DXFScanner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "class",
    "name": "DXFScanner",
    "memberof": "lib/scanners/DXFScanner.js",
    "static": true,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/scanners/DXFScanner.js",
    "importStyle": "DXFScanner",
    "description": "Using AutoCad 2012 DXF Reference(See pages 3 - 10)\nhttp://images.autodesk.com/adsk/files/autocad_2012_pdf_dxf-reference_enu.pdf",
    "examples": [
      "let dxfScanner = new DXFScanner()"
    ],
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "Scanner"
    ]
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "dxfData",
        "description": "DXF Data in Array object"
      }
    ]
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "next",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#next",
    "access": "public",
    "description": "Increment the file pointer",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "refrence to Scanner object"
    },
    "override": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "throw error when no data to read"
      }
    ],
    "params": []
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "_pointer",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#_pointer",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "_eof",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#_eof",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "peek",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#peek",
    "access": "public",
    "description": "Read the current position group in the file",
    "lineNumber": 48,
    "return": {
      "nullable": null,
      "types": [
        "{code: Number}|*"
      ],
      "spread": false,
      "description": "the first is the group code, the second is the value"
    },
    "override": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "throw error when unable to read the group data from file"
      }
    ],
    "params": []
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "rewind",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#rewind",
    "access": "public",
    "description": "Set the position file pointer",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "numberOfGroups",
        "description": "number of group"
      }
    ],
    "override": true,
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "hasNext",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#hasNext",
    "access": "public",
    "description": "Return true if only if there is data to read",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "override": true,
    "params": []
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "isEOF",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isEOF",
    "access": "public",
    "description": "Return true if only if there is End of file",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "override": true,
    "params": []
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "ftell",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#ftell",
    "access": "public",
    "description": "Gives current position in the file",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} current position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "current position"
    },
    "override": true,
    "params": []
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "isCurrentGroup",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isCurrentGroup",
    "access": "public",
    "description": "Return true only if the current group of scanner is specified one",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "group code"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "goup value"
      },
      {
        "nullable": null,
        "types": [
          " function(currentGroup: Object, supplyGroup: Object): boolean "
        ],
        "spread": false,
        "optional": false,
        "name": "comp",
        "description": "describe your comparatoe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "isStartOfSection",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isStartOfSection",
    "access": "public",
    "description": "Return if Section block start",
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "params": []
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "isEndOfSection",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isEndOfSection",
    "access": "public",
    "description": "Return if Section block end",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "params": []
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "isStartOfTable",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isStartOfTable",
    "access": "public",
    "description": "Return if Table block start",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "params": []
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "isEndOfTable",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isEndOfTable",
    "access": "public",
    "description": "Return if Table block end",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "params": []
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "isStartOfBlock",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isStartOfBlock",
    "access": "public",
    "description": "Return if Table block start",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "isEndOfBlock",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isEndOfBlock",
    "access": "public",
    "description": "Return if Table block end",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "params": []
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "isStartOfAppGroup",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isStartOfAppGroup",
    "access": "public",
    "description": "Return if Group start {application_name",
    "examples": [
      "{ACAD_REACTORS / {ACAD_XDICTIONARY"
    ],
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "params": []
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "isEndOfAppGroup",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#isEndOfAppGroup",
    "access": "public",
    "description": "Return if Group end",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "params": []
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "__parseGroupValue",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#__parseGroupValue",
    "access": "private",
    "description": "Parse a value to its proper type.",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} cast a value to its proper type"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "dxf group code"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value aginst group code in string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "cast a value to its proper type"
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "throw error when str incompatible with the type expected"
      }
    ]
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "parseBool",
    "memberof": "lib/scanners/DXFScanner.js~DXFScanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/DXFScanner.js~DXFScanner#parseBool",
    "access": "private",
    "description": "Parse a boolean according to a 1 or 0 value",
    "lineNumber": 255,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - true if str 1 , false if 0 else throw type error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "0 or 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if str 1 , false if 0 else throw type error"
    },
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "throw error when str is not 0 or 1"
      }
    ]
  },
  {
    "__docId__": 296,
    "kind": "file",
    "name": "lib/scanners/Scanner.js",
    "content": "import assert from 'assert';\r\n\r\n/**\r\n * Scan the input data\r\n * @interface\r\n * \r\n */\r\nexport default class Scanner {\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {Object} data - Object\r\n     */\r\n    constructor(data) {\r\n        /**\r\n         * @private\r\n         * @type {Number} \r\n         */\r\n        this._pointer = 0;\r\n        /**\r\n         * @private \r\n         * @type {Array} \r\n         */\r\n        this._data = data;\r\n        /**\r\n         * @private \r\n         * @type {Boolean} \r\n         */\r\n        this._eof = false\r\n    }\r\n\r\n    /**\r\n     * Increment the file pointer\r\n     * @public\r\n     * @abstract\r\n     */\r\n    next() {\r\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\r\n    }\r\n\r\n    /**\r\n     * Read the current position data\r\n     * @public\r\n     * @abstract\r\n     */\r\n    peek() {\r\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\r\n    }\r\n\r\n    /**\r\n     * Set the position to the begining point\r\n     * @public\r\n     * @abstract\r\n     * @param {Number} step - number of step\r\n     */\r\n    rewind(step) {\r\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\r\n    }\r\n\r\n    /**\r\n     * Return true if only if there is data to read\r\n     * @public\r\n     * @abstract\r\n     * @returns {boolean} true/false\r\n     */\r\n    hasNext() {\r\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\r\n    }\r\n\r\n    /**\r\n     * Return true if only if there is End of file\r\n     * @public\r\n     * @abstract\r\n     * @returns {boolean} true/false\r\n     */\r\n    isEOF() {\r\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\r\n    }\r\n\r\n    /**\r\n     * Gives current position in the file\r\n     * @public\r\n     * @abstract\r\n     * @returns {Number} position\r\n     */\r\n    ftell() {\r\n        assert(false, 'Object is trying to call abstract method. Implement it in base class');\r\n    }\r\n\r\n    /**\r\n     * Set Object which need to scan\r\n     * @public\r\n     * @param {Object} data - object which need to scan\r\n     */\r\n    setData(data) {\r\n        this._data = data;\r\n    }\r\n}",
    "static": true,
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/lib/scanners/Scanner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 297,
    "kind": "class",
    "name": "Scanner",
    "memberof": "lib/scanners/Scanner.js",
    "static": true,
    "longname": "lib/scanners/Scanner.js~Scanner",
    "access": "public",
    "export": true,
    "importPath": "cadincloud/lib/scanners/Scanner.js",
    "importStyle": "Scanner",
    "description": "Scan the input data",
    "lineNumber": 8,
    "interface": true
  },
  {
    "__docId__": 298,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Object"
      }
    ]
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "_pointer",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#_pointer",
    "access": "private",
    "description": "",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "_data",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#_data",
    "access": "private",
    "description": "",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "_eof",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#_eof",
    "access": "private",
    "description": "",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "next",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#next",
    "access": "public",
    "description": "Increment the file pointer",
    "lineNumber": 37,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "peek",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#peek",
    "access": "public",
    "description": "Read the current position data",
    "lineNumber": 46,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "rewind",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#rewind",
    "access": "public",
    "description": "Set the position to the begining point",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": "number of step"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "hasNext",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#hasNext",
    "access": "public",
    "description": "Return true if only if there is data to read",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "isEOF",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#isEOF",
    "access": "public",
    "description": "Return true if only if there is End of file",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true/false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true/false"
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "ftell",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#ftell",
    "access": "public",
    "description": "Gives current position in the file",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} position"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "position"
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "setData",
    "memberof": "lib/scanners/Scanner.js~Scanner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/scanners/Scanner.js~Scanner#setData",
    "access": "public",
    "description": "Set Object which need to scan",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "object which need to scan"
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "**Edit a file, create a new file, and clone from Bitbucket in under 2 minutes**\n\nWhen you're done, you can delete the content in this README and update the file with details for others getting started with your repository.\n\n*We recommend that you open this README in another tab as you perform the tasks below. You can [watch our video](https://youtu.be/0ocf7u76WSo) for a full demo of all the steps in this tutorial. Open the video in a new tab to avoid leaving Bitbucket.*\n\n---\n\n## Edit a file\n\nYou’ll start by editing this README file to learn how to edit a file in Bitbucket.\n\n1. Click **Source** on the left side.\n2. Click the README.md link from the list of files.\n3. Click the **Edit** button.\n4. Delete the following text: *Delete this line to make a change to the README from Bitbucket.*\n5. After making your change, click **Commit** and then **Commit** again in the dialog. The commit page will open and you’ll see the change you just made.\n6. Go back to the **Source** page.\n\n---\n\n## Create a file\n\nNext, you’ll add a new file to this repository.\n\n1. Click the **New file** button at the top of the **Source** page.\n2. Give the file a filename of **contributors.txt**.\n3. Enter your name in the empty file space.\n4. Click **Commit** and then **Commit** again in the dialog.\n5. Go back to the **Source** page.\n\nBefore you move on, go ahead and explore the repository. You've already seen the **Source** page, but check out the **Commits**, **Branches**, and **Settings** pages.\n\n---\n\n## Clone a repository\n\nUse these steps to clone from SourceTree, our client for using the repository command-line free. Cloning allows you to work on your files locally. If you don't yet have SourceTree, [download and install first](https://www.sourcetreeapp.com/). If you prefer to clone from the command line, see [Clone a repository](https://confluence.atlassian.com/x/4whODQ).\n\n1. You’ll see the clone button under the **Source** heading. Click that button.\n2. Now click **Check out in SourceTree**. You may need to create a SourceTree account or log in.\n3. When you see the **Clone New** dialog in SourceTree, update the destination path and name if you’d like to and then click **Clone**.\n4. Open the directory you just created to see your repository’s files.\n\nNow that you're more familiar with your Bitbucket repository, go ahead and add a new file locally. You can [push your change back to Bitbucket with SourceTree](https://confluence.atlassian.com/x/iqyBMg), or you can [add, commit,](https://confluence.atlassian.com/x/8QhODQ) and [push from the command line](https://confluence.atlassian.com/x/NQ0zDQ).",
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"cadincloud\",\n  \"version\": \"1.0.0\",\n  \"description\": \"CAD in cloud\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"build\": \"webpack --mode=development\",\n    \"build:prod\": \"webpack --mode=production\",\n    \"watch\": \"webpack --watch\",\n    \"dev\": \"webpack-dev-server --mode=development\",\n    \"doc\": \"esdoc\",\n    \"build:lib\": \"babel ./lib -d ./lib_build\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://KarkiCoder@bitbucket.org/KarkiCoder/cadincloud.git\"\n  },\n  \"author\": \"Dheeraj Karki\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://bitbucket.org/KarkiCoder/cadincloud#readme\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^6.26.3\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"clean-webpack-plugin\": \"^0.1.19\",\n    \"copy-webpack-plugin\": \"^4.5.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"webpack\": \"^4.16.1\",\n    \"webpack-cli\": \"^3.1.0\",\n    \"webpack-dev-server\": \"^3.1.4\"\n  },\n  \"dependencies\": {\n    \"bootstrap\": \"^4.1.3\",\n    \"jquery\": \"^3.3.1\",\n    \"three\": \"^0.95.0\"\n  }\n}\n",
    "longname": "/Users/dkarki/workspace/git_proj/cadincloud/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]